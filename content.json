[{"title":"npm 简介","date":"2017-07-07T01:57:35.000Z","path":"2017/07/07/what-is-npm/","text":"随着JavaScript的流行，相关工具的使用也变得非常重要。npm是出现的一个小公举，类似的工具还有Yarn，不过目前npm还是更加普及一点。稍微查了下他们的区别，说是Yarn更好一点，更多大牛更加推荐。不过很多项目用的还是npm管理，比如之前介绍的hexo的安装包。 npm全称是node package manager，所以它本质上就是个包管理器。类似mac上的神器，brew。不过npm只是用来管理nodejs的。这样开发js应用的时候，就可以大量使用前端库，并且保持较好的版本控制。为什么说“较好”，版本控制是个坑。很多构建的问题，据说都可以归到npm的头上，使用Yarn貌似能解决这一问题。 要使用npm首先要安装node，Mac中用brew先安装node再说。 1$ brew install node 查看一下版本号，发现npm不是最新，然后更新一下npm，怎么更新呢？用自己更新自己！ 1$ npm i -g npm 你会发现有个-g参数，这个参数是用来全局安装npm的，不过很多插件都是本地安装的，比如很多项目才需要的插件，安装在全局会很乱，也不好管控各种版本，但是又有的插件经常用到，比如grunt-cli之类，就需要安装在全局。所以原则是，依情况而定。 一般来说下面几个是建议安装在全局的。 1234$ npm install -g coffee-script$ npm install -g less$ npm install -g grunt-cli$ npm install -g gulp 先看看，这些工具暂时用不到的就不用研究，用到再学习不迟。 然后是npm的包安装。命令如下： 12$ npm i &lt;packagename&gt; //安装在当前目录下$ npm i -g &lt;packagename&gt; //安装在全局 这样是一个个包分别安装，太麻烦了！ 怎么批量安装呢？ 装过hexo的都知道，目录下面有个package.json文件，这个文件就是用来配置需要安装的包们的。打开看一下，发现好复杂！不过稍微仔细看一下，发现depedencise下面就是包名字加版本号。然后在目录下面运行： 1$ npm install --save //--sava用来修改json文件的包依赖关系 就会在当前目录下面安装所有的包至node_modules这目录下面了。 更新安装的包： 12$ npm outdated [-g] //查看哪些过期了$ npm update [-g] //更新包 手动维护package.json中的包版本实在麻烦，介绍一个插件，npm-upgrade，这个插件可以检查json文件中包的版本号，然后更新。 不过npm社区真是日新月异，好多包之前装的，更新一下发现都“deprecated”了，前端真是前景巨大啊。","tags":[{"name":"npm js","slug":"npm-js","permalink":"http://zhzhou.me/tags/npm-js/"}]},{"title":"git checkout 的使用","date":"2017-06-02T07:33:08.000Z","path":"2017/06/02/git-checkout-usage/","text":"Git命令中，我个人感觉最重要的命令就是git checkout了。这个命令简单来说是Git的精髓–分支管理。当然对新手来说也是比较难以理解的概念之一。记得刚开始用git的时候，git checkout这个命令还是蛮令我困惑的。困惑之一就是远程分支和本地分支的管理上。比如怎么把远程不同于master分支的东西弄到本地，怎么在不同分支之间切换自如，利用分支的优势为自己开发所用等。 首先，git checkout一般和git branch配合使用。不过也可以直接git checkout -b，即“创建并切换分支”。 一般做改动，建议直接创建一个分支，因为在master上直接改动，万一搞乱了，虽然可以时光倒流，但是毕竟还是保持几个版本比较方便，新的特性也能方便的做对比。这个就是为什么git项目文件夹可能很大，但是进去文件夹发现没什么文件的原因。因为其它分支都被”隐藏”起来了嘛！ 一般教程也就到这就结束了，其实还有很多常用的东西没讲。比如远程上面有个分支，我想弄到本地来。经常遇到的一个情况就是远程上面的某个分支有我需要的内容，我怎么获取到本地呢？ 先看一下远程有哪些分支： 1git branch -r 然后拉取远程分支，并创建本地分支：1git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt; 如果想远程分支名和本地分支名一样，也可以用 --track 这个选项。 1git checkout -t origin/&lt;远程分支名&gt; 以上当然也可以用git fetch来做，区别只是会先fetch到repository，然后手动切换到工作分支。 12git fetch origin &lt;远程分支名&gt;:&lt;本地分支名&gt;git checkout &lt;本地分支名&gt; 远程操作上可能会出现很多问题，比如什么merge conflict之类，新手可以打开gitk看看，还有tower神器。不过感觉还是要先了解命令行，才能更好的用这些图形化界面。有点鸡生蛋，蛋生鸡的味道。 参考链接： 阮一峰博客 Man Page","tags":[{"name":"git","slug":"git","permalink":"http://zhzhou.me/tags/git/"}]},{"title":".gitignore文件的使用","date":"2017-05-26T06:33:31.000Z","path":"2017/05/26/gitignore-usage/","text":"用上GitHub之后似乎什么项目都想push一下，新手在用git相关命令难免有些问题。有很多问题似乎是过了很久我才明白的，虽然间间断断用git也很长时间了。这些问题类似“vim退出”之类，不过新手确实难免会碰到。这里做点记录，方便自己和后来人。 git项目中如果想要忽略掉某个文件，不让它出现在版本库中，比如.DS_Store之类的文件，可以在项目根目录中修改.gitignore文件，这个文件一般不用自己创建，也不大需要修改，有些IDE会自己给你弄好。但是有的时候还是需要自己手动修改一下，比如有的文件中包含了你数据库的密码，当然就不能出现在github上了。 修改.gitignore文件很简单，一行一行输入不需要放到版本库里面的文件或文件夹名即可。 不过有的时候push过之后，然后修改了.gitignore，每次git status会出现Untracked files...之类的提示。这是因为文件已经被版本管理了！文件已经被track了。如果需要解决这个问题，就需要删除掉本地的缓存文件，变成untrack状态。 步骤如下： 123git rm -r --cached . git add .git commit -m &quot;update .gitignore&quot; 再次git status，发现clean了，完美。 相关链接： 半官方资料 廖雪峰教程","tags":[{"name":"git","slug":"git","permalink":"http://zhzhou.me/tags/git/"}]},{"title":"Mac OSX上安装 Java","date":"2017-04-19T00:17:38.000Z","path":"2017/04/19/install-java-on-mac/","text":"在Mac上安装Java，之前都是在官方网站下载安装包，这样当然不怎么方便，所以自然就想到用homebrew安装了。查了一下，果然有办法，而且可以保持几个不同版本的JDK，方便不同版本测试。 这个方法就是使用jenv，这个东西是基于rbenv开发的，不同的是rbenv是为了管理ruby，jenv是为了管理java。用jenv之后，就不用设置什么$JAVE_HOME变量了。而且可以方便切换各种不同版本的JDK，方便调试。 主要步骤： 安装 brew-cask 12brew updatebrew install caskroom/cask/brew-cask 安装 jenv 123brew install jenvecho &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcecho &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc 安装最新版本的Java 1brew cask install java 然后看看brew把Java安装到哪里去了，一般在如下位置 1jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/ 然后在$HOME目录下加一个.java-version文件，里面写个1.8，结束。 下面具体谈谈具体细节。 首先Jenv是用来干啥的？ 主要是用来管理不同版本的Java的，什么Oracle JDK，OpenJDK等。可以去官网看看。 在OSX中所有JVM都安装在 /Library/Java/JavaVirtualMachines/下，所以上面第四步添加安装的版本到jenv中。 查看安装了那些JDK版本。12345~ ᐅ jenv versions system* 1.8 (set by /Users/Spike/.java-version) 1.8.0.121 oracle64-1.8.0.121 配置全局版本号1$ jenv global oracle64-1.6.0.39 配置本地版本号1jenv local oracle64-1.6.0.39 配置Shell版本号1jenv shell oracle64-1.6.0.39 生成 Shimsjenv可以将所有安装过的Java版本中的bin目录集合管理，即~/.jenv/versions/*/bin/*中的所有东西都放到shims文件夹下。每次安装完新版本都运行jenv rehash即可。 1$ jenv rehash 参考资料： Master your Java Environnement with jenv Install Java 1.8 on Mac OS El Capitan","tags":[]},{"title":"使用 Travis-CI 来自动化部署 Hexo","date":"2017-02-20T06:00:00.000Z","path":"2017/02/20/auto-deploy-hexo-on-travis-ci/","text":"之前写过一个 Hexo 博客的搭建方法，搭建好之后我就没有怎么写博客了。一来是因为自己没什么好分享的（其实就是懒哈），二来是感觉静态技术博客这种形式已经落伍了，如果要学某种技术，还是直接找视频教程比较快。 不过因为知道了“持续集成”，即 Continuous integration，这种技术已经很常见了，不过我最近才学习到。用在 hexo 博客的部署上比较合适，整个部署也比较简单，适合我这种小白。 之前部署 hexo 博客，只要在终端输入 hexo g -d即可，当然前提是你已经写好文章了呀，写不出文章的话我是帮不了的。而且已经搭建好博客环境，即 node.js 相关及 Hexo 本身。那换成 Travis CI 的持续集成服务到底有什么用呢？操作会不会更简单？答案是—–不会！ 那TM要它有什么用？！ 且听我慢慢说。 什么叫持续集成网上很多解释，感兴趣的可以看看阮一峰的这篇文章。 概括起来讲，就是一个外包公司，博主只管写好文章，然后丢给它去处理，它就自动给你各种加工渲染，然后放到博客页面上去。你只需在有网络的地方即可开始写作，当然也要能无障碍访问 GitHub 才行啊（关于如何更快访问墙外网络，我会在之后一篇文章说明）。直接登录 GitHub 账号写东西，实在不够优雅，所以还要弄个 Markdown 编辑器，本地或者基于 Web 的都可以（Mac 推荐用 Bear，web的就用 Cmd Markdown），写完直接 push 到 GitHub 即可，其他各种库、主题什么的更新都不用管了。这才是新时代的方法—-只要提出需求，然后交给“云”处理。 Travis-CI 介绍Travis CI 是目前新兴的开源持续集成构建项目，用来构建托管在GitHub上的代码。简单来说，Travis CI原理就是当你每次提交 commit 到在 GitHub 后，它会自动检测你的提交，同时根据的配置文件，生成一个 Linux 虚拟机来运行你的命令，通常这些命令用于测试，构建等。在我们的要求下，就可以用它运行一些hexo g d之类的命令来自动生成、部署我静态网页。好像不是很懂，没关系，做一遍就懂了。 Travis-CI 官方文档，有时间，懂英语的可以仔细看看。写得最好的还是官方文档，一般我们总是各种找教程什么的，其实最好的教程就是自带的文档。 自动部署看到这里，应该都有了 GitHub 的 Pages了，不然也不会涉及到部署什么的。下面步骤前提是在你电脑上可以 hexo g -d成功的前提下进行的。 登陆Travis CI官网，使用GitHub账户登录，发现你的 repos都出现了吧。然后关键了。选择你要启动的项目，在这里也就是yourname/yourname.GitHub.io，你的博客项目地址。 然后点击设置按钮，进入设置选项，开启第一行的服务: Build only if .travis.yml is present：是只有在.travis.yml文件中配置的分支改变了才构建； Build pushes：当推送完这个分支后开始构建。 到这一步， 我们已经开启了要构建的仓库。但此时Travis还没法帮助我们自动构建并部署，因为没有访问GitHub的权限。我们自己在本地计算机上push能成功是因为有了 SSH key，但是交给 travis去部署的话，它是没有这个key的，但是也可以给它，只要加密再解密就好了，配置文件配置可以参考文末的链接。不过我这里就用GitHub提供的token变量功能吧，比较适合新手。 在 GitHub 上为 Travis CI 配置 Acess Token，登陆GitHub，进入设置界面，点击到 Personal access tokens 页面。 点击右上角的Generate new token 按钮会生成新的token，点击后提示输入密码后继续，然后来到如下界面，取个名字（我这里取 GH_token，下面配置文件中要用到，牢记！），勾选一些权限（只要repo就行了，还有email），这个token很重要，如果别人也有了这个token，你GitHub账户的repo就可能被任意修改！！所以不能外泄这个token！重要的事情就不说三遍了。不过如果外泄了，登录你的GitHub，删除这个token即可。 生成完后，拷贝下来，只有这时候才会显示，下载进来为了安全他就不会显示了，如果忘了只能重新生成一个了，拷贝完以后到Travis CI页面中 Environment Variables 进行配置。 现在 Travis CI 已获得 GitHub 访问权限，但它并不知道如何进行部署，所以还需要进一步设置。 在源代码分支（我这里即 blog-source 分支）下配置 .travis.yml 文件 1234567891011121314151617181920212223242526272829303132333435363738language: node_js #设置语言node_js: stable #设置相应的版本cache: directories: - node_modules #据说可以减少travis构建时间before_install: - git clone https://github.com/zpike/hexo-theme-apollo.git themes/apollo #自己配置一个主题，也是乐趣之一，特效什么的，不过我还是偏好简洁（Next主题用的人真是多啊）# S: Build Lifecycleinstall: - npm install #安装hexo及插件before_script: - git clone --branch master https://github.com/zpike/zpike.github.io.git public #获取最新的commit信息script: - hexo cl #清除 - hexo g #生成after_script: - cd ./public - git init - git config user.name \"zpike\" #修改成自己的github用户名 - git config user.email \"conan401@126.com\" #修改成自己的GitHub邮箱 - git add . - git commit -m \"update\" - git push --force --quiet \"https://$&#123;GH_token&#125;@$&#123;GH_REF&#125;\" master:master #GH_token就是在travis中设置的tokenbranches: only: - blog-source #只监测这个分支，一有动静就开始构建（我可能发一篇文章会push好多次，每次看到它忙着构建，感觉好浪费）。env: global: - GH_REF: github.com/zpike/zpike.github.io.git 大致结构就是这样，根据自己的需求还需要一点修改。 .travis.yml 配置完成，这个时候就可以push文章到你的 blog-source 分支上去了。然后其他工作都由 Travis-CI 来完成。 登陆Travis CI，不出意外的话（我出了好多次意外，不过最终皇天不负有心人！哈哈）Travis已经检测到变化并进行构建部署，log记录了构建的过程，出什么问题里面都可以点开来看。 常见问题配置文件如果出问题，基本都是配置文件的问题，yml文件的格式还是要求比较严格的，稍微不注意就不行。.travis.yml 文件的主要流程分三步，获取历史，生产静态文件，发布。 before_script: 在所有动作之前，先把 master 分支clone到./public文件夹，保留之前的 commit记录，把最新结果提交上去。 script: 就是 hexo generate的过程。 after_success: 在成功之后，成功都到了public文件夹下，然后就是照着git push到master分支下。 当然还需要确认travis build都在 blog-source分支下工作。 主题设置网上很多hexo的主题，有的还在持续更新，这个就需要在配置文件中clone 一下，保持更新，或者在package.jason文件中配置一下也行吧（没试过），还是在travis配置文件中设置一下，方便换主题。设置在 before_install 后面。 git命令这套方案弄完之后，在任何电脑，只要有git，就可以写东西了。git指令如何操作呢？ 新手可能会比较麻烦。比如我。虽然我很早就用过git，不过很多指令学了忘，忘了学。其实最好的学习就是不断使用，如果几周不用，再好的工具也记不住。比如vim或者emacs。 git新手建议看看廖雪峰的博客，还有git-scm，还有git-tower官网的很多教程，写得非常好，图文并茂，入门书籍的话应该无出其右了。 不过在写博客这方面，只需要记住几个常用的命令就行了。 1234567git clone git@github.com:zpike/zpike.github.io.git #先克隆git checkout origin/blog-source #默认是master分支，然后切换分支git checkout -b blog-source #本地新建一个博客源文件分支git add . #写完博客添加文件git commit -m &quot;xxx&quot; #加入commit信息git push origin blog-source #push到远程 记住以上必用的命令当然不够，为了更方便操作，还是需要多多记住一些常用的git命令。 如果在web上直接写文章的话，看下面。当然不建议这么做啦，不过如果身边没有设备的话，只有一只手机，那也没办法。灵感来了挡不住呀。 prose这个网站不错，很清爽，然后可以和Github 绑定，这样就可以直接在这上面写你的Pages博客了，写好直接save，搞定！。网页端暂时只有这个我比较满意。 好的客户端还在寻找中，如果Bear或者Ulysses支持就好了，或者好像Tower是管理GitHub的利器，不行也可以那里写，只是不知道markdown支持如何。 不过虽然可以直接写，但是很多Hexo的特性就用不到了，比如一些模版什么的，每次还要自己输入元数据，还是稍显麻烦。 总结现在终于可以anywhere, anyplatform, anyeditor都可以开始写作了，还是很不错的。要做的就是打开editor，然后写完push即可，不用操心其它，多美好！ 在工具的路径上是没有止境的，生命不息，折腾不止。 参考资料使用 Travis CI 自动部署 Hexo 使用 Travis CI 自動發布 hexo 到 GitHub pages 基于 Hexo 的全自动博客构建部署系统 用 Travis CI 自動部署網站到 GitHub(Hexo 作者写的)","tags":[{"name":"hexo travis","slug":"hexo-travis","permalink":"http://zhzhou.me/tags/hexo-travis/"}]},{"title":"Hexo 搭建笔记","date":"2016-07-07T08:07:16.000Z","path":"2016/07/07/how-to-create-a-hexo-blog/","text":"很久以前看过阮一峰的介绍 Jekyll 做个人博客的文章，那时候还没用 Mac，所以也没法尝试。现在用了Mac之后想起来了，不过写博客还是挺费力的，没啥干货也不好意思出来唠叨。尽量写点有趣又有科技含量的东西吧，逼着自己更新知识库还是不错的。 Jekyll的官网虽然做得不错，但是流程我还没看明白，比Hexo的说明要复杂。所以下面就从弄Hexo博客开始吧。 这几天折腾了一个Hexo博客，并且部署到GitHub和Coding，而且租了个服务器，弄个了个人域名，过程中几个小问题搜了很多文章，但是也没能解决我的问题，还是挺费劲的。第一篇文章就用来记录这个过程我遇到的问题吧。 网上信息比较多，很多过期的文章，软件版本更新之后就不大能用了，PC和Mac下的区别较多，给新手会造成不必要的误解。 官网可以查到的东西我就不再写了，下面多写写自己这个过程中遇到的一些问题。 Hexo是一个台湾人弄的，不知道靠不靠谱，希望可以一直更新吧，毕竟用起来整体感觉还不错，轻快简单。 很多人推荐使用NexT主题，搜了一下发现好多人用这个主题，瞬间感觉没啥特点了。所以要想独特一点，有个性一点还是自己找个冷门点的主题改改，或者自己弄个主题，只要专注于写作就行。 安装过程比较简单，不说了。Hexo安装依赖于node.js，npm安装比较不稳定，开个VPN比较好一点。Hexo官网上面的文档挺全的，需要补充的就是主题的设置，还有网站的第三方服务的设置。 Hexo的配置都在_config.yml中，里面注释比较详细，不懂的查下官网，一般都知道怎么设置。需要注意的是文件类型是yml，语法要求比较严格，开头冒号后面必须空一格，不然不能识别。语法支持好的比如vim或者sublime，弄个插件，一般都能很好支持yml语法。还有这个文件要和主题目录下的同名文件相互区别，不要弄混淆了。 具体设置，比如language，中文简体的代码是zh-hans，其他设置试一下就知道了，一般默认就ok了。头像，logo什么的，弄个url比较好，或者放到Hexo的source目录下，这样Hexo g 的时候才能不丢失。 配置测试ok了，然后就可以写blog了。Hexo new 加文件名即可。这样就在source文件夹下新建了一个文件，写好标签和分类，就可以写正文了。网上有教你Hexo new之后直接打开编辑器的教程，这样就更方便了。直接在sublime中或者其他编辑器中写文章。需要注意的是Win下目录设置的问题。类似这样D:\\\\Program Files\\\\Sublime Text 3\\\\...。Mac中的话就比如这样&quot;/Applications/Sublime\\ Text.app&quot;，注意空格之前要加一个反斜杠。（不过Sublime并不大适合写文章，MWeb据说不错可以试试） 其实还可以使用Cmd Markdown在线写文章，然后导出markdown格式，再稍微修改即可发布了。不过过程稍微麻烦了点。喜欢移动写作的人，估计会比较喜欢。不过最近我将hexo固定到air上来写，所有其他电脑上的文件都删除了。这样还是更适合我一点。（当然在这之前，你还是可以尽量折腾，比如自动构建什么的） 写文章不满意，当然也可以删掉，但是Hexo没有提供删除文章的命令，所以手动删掉也行，不过我测试了一下，在删光文章的时候Hexo g会出错，一定要hexo new一篇文章才能进行Hexo g。 再然后就是配置主题什么的了。建议看看NexT主题的官网，里面有详细的教程，非常实用，很多官网没看明白的东西可以在那边看看。比如字体，图标，第三方服务什么的。主题其实也是个大坑，最近就不研究了。专注写作比较好。当然第三方服务可以看看，毕竟要用到不少，比如评论系统， 最后写好文章就可以推送到 github pages 上去了。GitHub或者Coding都不错，国内建议用Coding，速度很快。不过很多人遇到Hexo d的时候不成功的问题，我也被这个问题折磨了很久，网上很多回答都没有解决我的问题。 其实直接将public中的生成文件push到pages就行了，只是这样不够优雅。所以还是希望一条命令（Hexo g -d）解决部署，在Mac问题较少，Win用户貌似要多写点配置内容，不过基本用我下面写的配置内容一定可以成功的。 首先想要部署到GitHub需要安装一个插件，Hexo-deployer-git，这个插件里面的文档作用比各种网上的文件要有用太多，建议看看。最终解决我的Hexo d的问题就是看了那个文档。因为我是Win下Git bash环境，所以Hexo d会出现问题，配置文件中需要这样写： 12345678# Deployment## Docs: https://Hexo.io/docs/deployment.htmldeploy: type: git repo: git@GitHub.com:name/name.GitHub.io.git branch: master user: your_GitHub_username email: your_email_address 当然前提是你ssh密钥以及GitHub或者Coding上主页都弄好了，具体看下各个网站的详细说明，Coding上比较容易，GitHub 稍复杂，跟着帮助文档过一遍流程就更熟悉了。 还有hexo g的时候可能会出现一些常见的问题，比如什么DTraceProviderBingds之类的，貌似是npm的问题，我之前遇到过，不过瞎弄了几次，居然莫名其妙就好了，暂时不知道为啥。 国内的duoshuo不行了，只能换到disqus上去了，不过我的博客总是加载不了disqus的服务，不知道为什么。索性就不用评论系统了，但是会保持的更新的。继续完善每个主题的文章。 最后列一下这个过程中用到的网站，方便查询。 Hexo官网文档 NexT主题官方网站详细配置 Coding Pages使用文档 Hexo怎么优雅地插入图片 Hexo添加文章时自动打开编辑器 多说评论 Hexo进阶 ps：还有图床可以用iPic，Mac 上面很好用，或者在 Windows 上面可以用MPic，配合七牛都是神器。直接复制图片，即可在md文件中粘贴。 还有很多 markdown 中可以用到的插件，或者工具，会为你的文章添加更多色彩，这些我准备再多研究下，再写几篇文章。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://zhzhou.me/tags/hexo/"}]}]