[{"title":"Mac OSX上安装 Java","date":"2017-04-19T00:17:38.000Z","path":"2017/04/19/install-java-on-mac/","text":"在Mac上安装Java，之前都是在官方网站下载安装包，这样当然不怎么方便，所以自然就想到用homebrew安装了。查了一下，果然有办法，而且可以保持几个不同版本的JDK，方便不同版本测试。 这个方法就是使用jenv，这个东西是基于rbenv开发的，不同的是rbenv是为了管理ruby，jenv是为了管理java。用jenv之后，就不用设置什么$JAVE_HOME变量了。而且可以方便切换各种不同版本的JDK，方便调试。 主要步骤： 安装 brew-cask 12brew updatebrew install caskroom/cask/brew-cask 安装 jenv 123brew install jenvecho &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcecho &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc 安装最新版本的Java 1brew cask install java 然后看看brew把Java安装到哪里去了，一般在如下位置 1jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/ 然后在$HOME目录下加一个.java-version文件，里面写个1.8，结束。 下面具体谈谈具体细节。 首先Jenv是用来干啥的？ 主要是用来管理不同版本的Java的，什么Oracle JDK，OpenJDK等。可以去官网看看。 在OSX中所有JVM都安装在 /Library/Java/JavaVirtualMachines/下，所以上面第四步添加安装的版本到jenv中。 查看安装了那些JDK版本。12345~ ᐅ jenv versions system* 1.8 (set by /Users/Spike/.java-version) 1.8.0.121 oracle64-1.8.0.121 配置全局版本号1$ jenv global oracle64-1.6.0.39 配置本地版本号1jenv local oracle64-1.6.0.39 配置Shell版本号1jenv shell oracle64-1.6.0.39 生成 Shimsjenv可以将所有安装过的Java版本中的bin目录集合管理，即~/.jenv/versions/*/bin/*中的所有东西都放到shims文件夹下。每次安装完新版本都运行jenv rehash即可。 1$ jenv rehash 参考资料： Master your Java Environnement with jenv Install Java 1.8 on Mac OS El Capitan","tags":[]},{"title":"终极 vimrc","date":"2017-04-18T05:17:04.000Z","path":"2017/04/18/the-ultimate-vimrc/","text":"使用vim需要配置自己的vimrc，用一个基本的vimrc，然后在这个基础之上学习各种添加方式也是学习的必经步骤。各种插件的安装使用，然后用各种插件管理器，比如Vundle或者pathogen，各种折腾vim也是乐趣之一。 不过如果一开始就用上一个大牛配置好的vimrc，然后学习他的使用方法，尽快熟悉vim的各种牛逼技能，也不能算是一个偷懒的方法。特别对于vim这种学习曲线比较陡峭的神器来说。学习Emacs我觉得也可以用同一种方法，用人家配置好的方便的配置文件，即能迅速入门，又能体会神器之神，何乐而不为。 github上找了一个号称终极vimrc的配置。看了一下适合高手也适合新手。里面有两个版本，一个基础配置，一个终极配置。只要在vimrc文件里面打开关闭即可，很方便。 终极版本主要配置了以下几点： 对Python文件的语法颜色搭配。打开最近编辑过的文档。目录结构Nerd tree。免打扰模式。几个比较好看的主题。几个常用模式。等等。 这些就不多说了，感觉光插件就够研究好久的。慢慢玩吧。","tags":[{"name":"vim","slug":"vim","permalink":"http://spikezz.com/tags/vim/"}]},{"title":"在 MAMP 中安装 Tomcat","date":"2017-04-15T05:29:17.000Z","path":"2017/04/15/install-tomcat-in-mamp/","text":"部署网络开发环境，Apache是一定要遇到的。如果更加深入研究，还要看http协议什么的。如果要学习JSP或者Servlet，Tomcat 就会出现了。两者的区别，从开发语言上看，Http Server是用C开发的，Tomcat是用纯Java开发的。Tomcat 用来部署 JSPs 和 Java Servlet，是服务于Java类的技术的（毕竟是自己开发的嘛）。所以可以将Tomcat看做是一个Servlet的容器，Java项目中，将产生的WAR文件，放到tomcat部署的文件夹下就可以了。 基于前面的网络部署，在Mac下还是用MAMP开发，但是普通版本没有自带Tomcat，所以怎么将Tomcat放到这里面呢？ 首先下载 Tomcat，目前8.5的版本是最新的稳定的版本，当然追新的也可以用版本9.0，貌似还是alpha，所以还是用个稳定的版本先学习下。 版本对比： 关于软件的版本控制，在网络开发中还是比较麻烦的。IDE工具可以配置各种版本的软件，但是命令行下面，如何方便的管理不同版本，还真比较需要多注意。当然homebrew做得不错，很多版本差异的问题可以得到解决。其他软件，安装源代码的时候也需要注意区分。不过这是另外一个话题，以后再说。 安装好了MAMP之后，下载好Tomcat，解压到默认文件夹。然后放到MAMP文件夹下。应该是： /Applications/MAMP/apache-tomcat-8.5.13 然后在MAMP目录下，创建一个tomcat文件夹的链接：（这样就不用在意版本号了，方便各种配置命令）12cd /Applications/MAMPln -s /Applications/MAMP/apache-tomcat-8.5.13 tomcat 将tomcat目录下的bin文件夹下所有sh文件都加个执行的权限：12cd /Applications/MAMP/tomcat/binls -l *.sh | xargs chmod +x 修改apache启动文件（/Applications/MAMP/bin/startApache.sh），最后加一行：1/Applications/MAMP/tomcat/bin/startup.sh 修改apache的停止文件（/Applications/MAMP/bin/stopApache.sh），如下：12345678# /bin/sh/Applications/MAMP/tomcat/bin/shutdown.sh/Applications/MAMP/Library/bin/apachectl stopsleep 2kill -TERM ps aux | grep [t]omcat | awk &apos;&#123; print $2&#125;&apos;sleep 1kill -9 ps aux | grep [t]omcat | awk &apos;&#123; print $2&#125;&apos; 其实也可以直接用 homebrew 安装，也方便管理。不过启动就不那么方便了。 安装：1$ brew install tomcat 运行：1$ /usr/local/Cellar/tomcat/[version]/bin/catalina run 然后浏览器查看是否运行。 配置： 1$ vim /usr/local/Cellar/tomcat/[version]/libexec/conf/tomcat-users.xml 最后面有几行注释掉的&lt;user 开头的内容，修改成如下： 1&lt;user username=&quot;admin&quot; password=&quot;password&quot; roles=&quot;tomcat,manager-gui&quot; /&gt; 然后在浏览器界面，点击Manager App 就可以管理应用了。","tags":[]},{"title":"MAMP 使用","date":"2017-04-15T05:28:48.000Z","path":"2017/04/15/MAMP-basics/","text":"对于搞网络开发的，基本上都要被开发环境的安装耗费点精力。不过个人感觉虽然很折腾，但是确实能学到点各个组件的一些特点，配置方法等。如果用集成得很好的软件，这其中的一些知识点就略过了。不过如果你弄个LAMP或者WAMP，对于集成得比较好的软件就会比较喜欢了。 用过一些集成开发环境的软件，比如XAMPP，WampServer，Usbwebserver等。这些软件都各有特点，用起来都还不错，当然有的还是不大稳定，或者对平台比较挑剔。试下来，建议windows就用WampServer，Mac的话就用MAMP。尤其是MAMP，做得很不错，而且还有Pro版本可以使用，对于初学者，免费版本其实就够了。 首先去官网下载，然后安装。最新版本是4.1.1，各个组件都做了相应的更新。对版本有要求的要稍微改一下对应的组件的版本号，就可以开始使用了。 端口是要注意的，新手可能在这边纠结，因为很多默认的端口不一致，比如在Jetbrains的IDE中开发，端口设置的一般是65543之类，要修改成MAMP的对应port，不然怎么搞都不行。当然也可以改MAMP的端口设置。不过我建议还是用它默认的端口，不容易冲突。 开发HTML或者PHP的，文件目录可以设置到自己常用的目录，或者也可以用默认的htdocs，建议使用自己的目录，比较不容易乱，也好找。 弄好之后应该可以用浏览器打开localhost了，看看相关参数，了解一下。mysql可以用phpMyAdmin查看管理。当然更深入的设置还是需要借助命令行。 配置文件都放在conf目录下，默认是没有mysql的配置文件的，即my.cnf 文件。模板要去support-files中去拷贝。 1cp /Applications/MAMP/Library/support-files/my-medium.cnf /Applications/MAMP/conf/my.cnf 但是貌似最新版本中没有了，老版本是有的，新版不知道将cnf文件模板放哪去了。不过这文件也很好下载。 还有修改 MySQL 的密码需求比较常见，也需要借助命令行。 1/Applications/MAMP/Library/bin/mysqladmin -u root -p password &lt;NEWPASSWORD&gt; 换成自己的密码即可。不过我感觉各种密码好乱，最好不要轻易修改，忘记密码的话挺麻烦。","tags":[]},{"title":"Kindle 更换字体","date":"2017-04-10T02:25:09.000Z","path":"2017/04/10/change-kindle-fonts/","text":"Kindle看书久了，稍微对中文字体的支持度比较不那么满意，所以搜索看看如何更换字体，发现只有越狱一条道路。不然只能用内嵌，但是书籍大小会变大，预料速度还会变慢。 所以还是越狱了吧。 中文字体确实大坑，如果涉及到中文书籍排版坑就更大了。这里只探讨一下indle用什么中文字体看书比较好。 但是首先还是要先越狱。步骤比较简单，但是也有出问题的可能。祝你好运。 关于越狱还是先看文末的几个链接。第一个链接最好，很详细，照着做基本不会出什么问题。 总结一下： 要越狱先要满足越狱条件。型号要对，并且离线模式。 然后就是降级固件。我这里是KV，降到5.50版本固件。 然后是安装几个插件。（重要步骤！）htmlviewer 和 hotfix 插件安装完成越狱过程就基本结束了，但是还有一步。 更新到最新固件，不更新的话貌似KUAL打不开。 然后是装两个必须的插件，一个是插件管理器，叫KUAL，这个必须的。 然后是一个MRPI，插件安装器。其实它是KUAL的插件，以后安装各种插件要通过它来安装。直接刷bin貌似固件不支持。 然后就越狱成功了。 之后要换Kindle字体的话，还需要装上 Font Hack 这个插件。可以看看官方指南。 要注意的是，这个方法暂时只能替换系统自带的四种字体。看书一般用宋体，或者黑体。 目前试过几种字体，比较流行的方正兰亭宋，思源黑，冬青黑等，当然还有刚出的思源宋。这些字体都不错，各有用处，适用场景非常多。目前我在用汉仪的[新人文宋](http://www.zcool.com.cn/article/ZMzk3ODU2.html)，感觉很适合看书。 这个字体是在微信读书app中发现的，试过感觉不错。（汉仪的中文字体确实不错，很有特色）还有就是个人感觉ppi高选宋体，低选黑体。 关于字体还真是很多门道，深究下去看书时间都不够了，还是多看几本书吧。 参考链接: how to jailbreak your Kindle Kindle 5.8.x 越狱教程：利用特制固件越狱 Kindle 中文字体推荐：更换一下字形口味","tags":[{"name":"Kindle","slug":"Kindle","permalink":"http://spikezz.com/tags/Kindle/"}]},{"title":"关于多说评论","date":"2017-04-10T02:00:06.000Z","path":"2017/04/10/about-reviews/","text":"最近国内的多说挂了，官网说是业务转移，姑且信吧，不靠谱的又不止这一家。 转移到disqus的话，试过，貌似不好加载，即使翻墙也不大容易，主题可能有些问题。但是又找不到其他比较简单够用的主题，索性就不用评论系统了。其实也没几个评论的，显得多余。 而且我感觉即使没有评论，想要和你联系的人总能找到你的联系方式，不管是Email还是社交平台，很多方式。不想联系你的，再多评论系统，链接分享什么的，都没用。 所以这个博客以后就不搞评论了。 不过文章我还是会更新的，发现之前写的有些文字还是问题多多，通顺的基础上还有很多纰漏，或者要添加修改的，反正持续更新吧。 还有写这个博客我感觉还是用hexo系统命令好，很多需要折腾的问题还是要折腾的，用自动构建开始是挺爽，但是也是在你已经开发修改完整个基础框架之后。所以就固定在mba上写吧，用hexo系统命令写作，功能组件手动更新也能学到更多的东西。 话说博客系统也是个大坑，很多可以使用的系统不谈，还有更多可以折腾的东西可以用到模板上。使用现有的模板真的还是有很多问题，拓展起来比较麻烦。不过好在目前成熟的cms系统比较丰富，比如知名的wordpress等。 这里推荐几个博客，发现做得不错，其次内容也不错。 比如Dave Ceddia的个人博客，有教你如何开发React，有兴趣的可以看看，非常适合入门。还有joelonsoftware，很出名的一个站，估计是最出名的个人博客了吧。还有flinhong，以及Jerry Qu的个人博客，用到的技术貌似都比较复杂，很多没听过的东西，做起来估计不易，不过喜欢折腾的，又想要独特博客风格的可以一试。","tags":[]},{"title":"基于 Rasperry Pi 3 的家用 NAS 搭建","date":"2017-03-07T16:00:00.000Z","path":"2017/03/08/nas-based-on-pi/","text":"最近感觉对于 NAS 的需求越来越多了，主要是因为电子设备的增多，想要将所有媒体文件以及文档都放到一个地方统一管理，然后在世界任何地方可以方便存取，查阅。这样的场景想想就诱人。 但是无奈群晖的 NAS 价格较高，个人用户还是比较难以承受的。不过很多其他方案可以实现，只是没有那么炫酷罢了。比如路由器自带的云存储，或者本篇文章要介绍的基于树莓派的家用 NAS 构建。 首先要用 NAS 当然要准备一个移动硬盘。目前可以选择的比较好的移动硬盘就那么几家，个人推荐WD的，或者希捷的，当然高富帅也可以选择Lacie，不过也就是样子货，还是简单实用就行了。 说道移动硬盘，最近出了SSD的移动硬盘，那玩意儿短期之内价格不会让人满意的，而且作为 NAS太浪费了。还是用传统的就好，用最新的 Pi 3 速度已经够一般使用了。 然后就是拿出你尘封已久的 Rasperry Pi 了，到这个网站下载镜像，然后就是安装系统了。关于镜像的选择，貌似网上很多，不过还是建议找最热门的，就是 OpenMediaVault，但是也有点问题，比如对名字中包含中文的文件的支持。总体上还是不错的，操作简单，方便。 OpenMediaVault 系统安装安装比较简单，主要步骤如下： 格式化树莓派的SD卡，格式化成FAT32格式； 下载镜像文件，解压，镜像格式img； 把精选写到SD卡上； 树莓派放到路由器旁，插上一根网线，然后上电； 等系统启动完毕，登录路由器界面，看到树莓派的ip地址，然后浏览器中输入ip地址，即可登录控制界面，默认登录用户名是：admin，密码：openmediavault。 然后就可以开始配置移动硬盘了。 OpenMediaVault 的使用配置只需要将移动硬盘挂载一下，在 web 界面下的 File Systems 中设置。 需要注意的是，每次配置好移动硬盘都需要 Apply 一下，其他操作也是如此。 然后是配置一下要分享的文件夹，在左边的 Shared Folders 中设置，选择好要分享的硬盘，就是刚刚挂载的移动硬盘。 要注意的是权限问题，管理挺麻烦的。自己家里用你就添加一个root帐号即可，所有权限都给。但是想要安全一点，还是需要多加限制。 最后就是使能 SMB/CFIS 分享功能，用过 iOS上的 nPlayer 的应该比较熟悉。添加刚刚设置好的分享的文件夹，结束。 然后就可以在电脑上访问到 NAS 中的资料了。其他设备访问也比较容易，手机上可以用 Solid Explorer （需付费）或者 ES文件浏览器。电视上应该也有ES浏览器可以安装。 ios设备推荐使用 nPlayer，非常方便。 参考文章： Turn any hard drive into networked storage with Raspberry Pi Openmediavault入门常见问题及解决方法","tags":[{"name":"nas","slug":"nas","permalink":"http://spikezz.com/tags/nas/"}]},{"title":"遗传算法入门","date":"2017-03-04T16:00:00.000Z","path":"2017/03/05/genetic-algorithm/","text":"遗传算法（Genetic Algorithm，简称GA）是一类借鉴生物界的进化规律（适者生存，优胜劣汰遗传机制）演化而来的随机化搜索方法，由美国的J.Holland教授1975年首先提出。遗传算法是一种模拟达尔文的遗传选择和自然淘汰的生物进化过程的计算模型，通过模拟自然进化过程搜索最优解，它常用来解决多约束条件下的最优问题。 遗传算法:优点：根据XY染色体的配对关系能够准确的寻找工艺生产搭配方式，又根据优胜劣汰的生物竞争法则寻找最佳搭配方式，最终寻找出最优的生产路径。 与问题领域无关切快速随机的搜索能力。 搜索从群体出发，具有潜在的并行性，可以进行多个个体的同时比较，robust. 搜索使用评价函数启发，过程简单 使用概率机制进行迭代，具有随机性。 具有可扩展性，容易与其他算法结合。 缺点： 依赖初始条件，条件的更改反应慢。对应时常更改需求的应用来说是一个挑战。 没有能够及时利用网络的反馈信息,故算法的搜索速度比较慢，要得要较精确的解需要较多的训练时间。 算法对初始种群的选择有一定的依赖性，能够结合一些启发算法进行改进。 算法的并行机制的潜在能力没有得到充分的利用，这也是当前遗传算法的一个研究热点方向。 神经网络：优点：神经网络有很强的非线性拟合能力，可映射任意复杂的非线性关系，而且学习规则简单，便于计算机实现。具有很强的鲁棒性、记忆能力、非线性映射能力以及强大的自学习能力，因此有很大的应用市场。 缺点: 最严重的问题是没能力来解释自己的推理过程和推理依据。通过寻找神经元、组合神经元的方式获得路径。 不能向用户提出必要的询问，而且当数据不充分的时候，神经网络就无法进行工作。 把一切问题的特征都变为数字，把一切推理都变为数值计算，其结果势必是丢失信息。 理论和学习算法还有待于进一步完善和提高。 基因算法基因算法GA（Genetic Algorithm）是基于自然系统的进化过程，算法创立一个初始化方案，基于初始化方案，算法再产生一个新的方案，通过许多代的连续方案，方案的质量被改善，算法结束于一个特别的中断规则。GA实际上是一种搜寻算法，已经用于许多优化问题，如销售员旅行问题，排程问题，设施布局问题等。 GA在搜索中比较目标函数值，接受临时的方案来克服本地优化，找到全局优化。然而，GA是探索法，可能不是最佳方案，但是大部分情况下，至少可以找到一个非常好的可行方案。 GA算法的核心是基于自然选择，在实际案例中应用时不需去“找”最优方案，只要不断“否定”表现不好的方案，最终会得到一个“最优解”，但是不一定是一个最优解。 GA算法的基本三个步骤：复制 –&gt; 交叉 –&gt; 变异 具体一点： 初始化Initialization（创造一个初始化解的集合，通常是随机解） 评估Evaluation（集合中每个个体都被评估，按照需求计算评估值，复杂度不一） 选择Selection（去除掉不好的解，保留好的解） 交叉Crossover（组合每个解的个体，形成新的解，自然选择） 变异Mutation（增加一点随机性，增加更多好的解） 重复Repeat（从第二步开始重复，知道终结条件满足） 流程图 种群(Population): 生物的进化以群体的形式进行，这样的一个群体称为种群个体： 组成群体的单个生物基因(Gene)：一个遗传因子染色体：包含一组的基因 编码： 需要将问题的解编码成字符串的形式才能使用遗传算法。最简单的一种编码方式是二进制编码，即将问题的解编码成二进制位数组的形式。 选择：选择一些染色体来产生下一代。一种常用的选择策略是 “比例选择”，也就是个体被选中的概率与其适应度函数值成正比。 交叉(Crossover)：2条染色体交换部分基因，来构造下一代的2条新的染色体。 变异(Mutation)：在繁殖过程，新产生的染色体中的基因会以一定的概率出错，称为变异。 适应度函数 ( Fitness Function )：用于评价某个染色体的适应度，用f(x)表示。有时需要区分染色体的适应度函数与问题的目标函数。 基本遗传算法伪代码：12345678910111213141516171819202122232425262728/** Pc：交叉发生的概率* Pm：变异发生的概率* M：种群规模* G：终止进化的代数* Tf：进化产生的任何一个个体的适应度函数超过Tf，则可以终止进化过程*/初始化Pm，Pc，M，G，Tf等参数。随机产生第一代种群Popdo&#123; 计算种群Pop中每一个体的适应度F(i)。 初始化空种群newPop do &#123; 根据适应度以比例选择算法从种群Pop中选出2个个体 if ( random ( 0 , 1 ) &lt; Pc ) &#123; 对2个个体按交叉概率Pc执行交叉操作 &#125; if ( random ( 0 , 1 ) &lt; Pm ) &#123; 对2个个体按变异概率Pm执行变异操作 &#125;将2个新个体加入种群newPop中&#125; until ( M个子代被创建 )用newPop取代Pop&#125;until ( 任何染色体得分超过Tf， 或繁殖代数超过G ) 常见问题： 1、在选择的过程中，选择多少次，会不会造成种群的减少，选到重复的怎么办？ 答：选择次数没有限制，即然是选择肯定就会有没选上的，因此会造成种群数量减少，选到重复的个体舍弃重新选择。建议选择的次数少于种群数量，因为不重复，因此当次数为种群数量时即全部选择了，这样就失去了选择的意义。舍弃重复的是因为重复的个体对种群的差异化没有帮忙（试想极端情况下全是重复个体，那么交叉后全是一样的，没有意义）。 2、 即然计算出了种群中每个个体的适应度，为什么不直接选择适应度高的，舍弃适应度低的，而要用其他算法来选择？ 答：适应度低的个体也可能存在优质基因。现实生活中的例子：一对傻子生了个聪明儿子。 3、交叉的过程是随机交叉还是两两交叉，交叉多少次合适？ 答：随机或两两交叉都可以，交叉次数大于或等于初始种群中个体数量/2。因为交叉一次产生两个新个体，而第3步的变异不产生新个体，因此为保证种群中个体的数量不致于越来越少（人口负增长）， 交叉次数大于或等于初始种群中个体数量/2。 整体设计流程： 编码–&gt;适应度函数的设计–&gt;遗传算子的设计(选择算子，交叉算子，变异算子)–&gt;实施流程图 编码一个实际问题最关键的步骤是对任务及工序编码。比如对工厂编号的编码，用数字表示：1，2，3.. 对任务的编码：J01，J02，J03.. 工序和任务相结合之后，形成一个完整的染色体，染色体其实就是某项工序和某项任务的结合体，编码结果可能是：1J03-2J02-2J02-1J02-2J04-1J03-2J02-1J01 对其分析一下：两家工厂，四个任务，依次出现的次序是03-02-04-01 然后就是杂交过程，即随机交换部分基因代码，工序不受影响，包含所有祖先的信息，对杂交结果需需修正（重复）或者补偿（缺少）。 然后是变异。变异的用处是避免过早收敛，从而得不到最优解。一般分两次变异。第一次变异是局部遗传操作（随机）；第二次变异是全局遗传操作。 然后是适应度函数的设计，遵循的规则一般有“最小生产周期”或者“最小生产成本”。 然后是复制。这个过程中优秀的染色体能获得更高的生产概率，从而在迭代过程中出现的次数更多。 最后是判断是否最优。条件一般是：1.最佳个体在迭代中出现的次数；2.预先设定的算法迭代次数达到。 参考链接： GA算法介绍GA算法的JAVA实现在TSP(旅行最佳路线问题)问题上应用GA算法基因算法教程","tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://spikezz.com/tags/algorithm/"}]},{"title":"使用 Travis-CI 来自动化部署 Hexo","date":"2017-02-20T06:00:00.000Z","path":"2017/02/20/auto-deploy-hexo-on-travis-ci/","text":"之前写过一个 Hexo 博客的搭建方法，搭建好之后我就没有怎么写博客了。一来是因为自己没什么好分享的（其实就是懒哈），二来是感觉静态技术博客这种形式已经落伍了，如果要学某种技术，还是直接找视频教程比较快。 不过因为知道了“持续集成”，即 Continuous integration，这种技术已经很常见了，不过我最近才学习到。用在 hexo 博客的部署上比较合适，整个部署也比较简单，适合我这种小白。 之前部署 hexo 博客，只要在终端输入 hexo g -d即可，当然前提是你已经写好文章了呀，写不出文章的话我是帮不了的。而且已经搭建好博客环境，即 node.js 相关及 Hexo 本身。那换成 Travis CI 的持续集成服务到底有什么用呢？操作会不会更简单？答案是—–不会！ 那TM要它有什么用？！ 且听我慢慢说。 什么叫持续集成网上很多解释，感兴趣的可以看看阮一峰的这篇文章。 概括起来讲，就是一个外包公司，博主只管写好文章，然后丢给它去处理，它就自动给你各种加工渲染，然后放到博客页面上去。你只需在有网络的地方即可开始写作，当然也要能无障碍访问 GitHub 才行啊（关于如何更快访问墙外网络，我会在之后一篇文章说明）。直接登录 GitHub 账号写东西，实在不够优雅，所以还要弄个 Markdown 编辑器，本地或者基于 Web 的都可以（Mac 推荐用 Bear，web的就用 Cmd Markdown），写完直接 push 到 GitHub 即可，其他各种库、主题什么的更新都不用管了。这才是新时代的方法—-只要提出需求，然后交给“云”处理。 Travis-CI 介绍Travis CI 是目前新兴的开源持续集成构建项目，用来构建托管在GitHub上的代码。简单来说，Travis CI原理就是当你每次提交 commit 到在 GitHub 后，它会自动检测你的提交，同时根据的配置文件，生成一个 Linux 虚拟机来运行你的命令，通常这些命令用于测试，构建等。在我们的要求下，就可以用它运行一些hexo g d之类的命令来自动生成、部署我静态网页。好像不是很懂，没关系，做一遍就懂了。 Travis-CI 官方文档，有时间，懂英语的可以仔细看看。写得最好的还是官方文档，一般我们总是各种找教程什么的，其实最好的教程就是自带的文档。 自动部署看到这里，应该都有了 GitHub 的 Pages了，不然也不会涉及到部署什么的。下面步骤前提是在你电脑上可以 hexo g -d成功的前提下进行的。 登陆Travis CI官网，使用GitHub账户登录，发现你的 repos都出现了吧。然后关键了。选择你要启动的项目，在这里也就是yourname/yourname.GitHub.io，你的博客项目地址。 然后点击设置按钮，进入设置选项，开启第一行的服务: Build only if .travis.yml is present：是只有在.travis.yml文件中配置的分支改变了才构建； Build pushes：当推送完这个分支后开始构建。 到这一步， 我们已经开启了要构建的仓库。但此时Travis还没法帮助我们自动构建并部署，因为没有访问GitHub的权限。我们自己在本地计算机上push能成功是因为有了 SSH key，但是交给 travis去部署的话，它是没有这个key的，但是也可以给它，只要加密再解密就好了，配置文件配置可以参考文末的链接。不过我这里就用GitHub提供的token变量功能吧，比较适合新手。 在 GitHub 上为 Travis CI 配置 Acess Token，登陆GitHub，进入设置界面，点击到 Personal access tokens 页面。 点击右上角的Generate new token 按钮会生成新的token，点击后提示输入密码后继续，然后来到如下界面，取个名字（我这里取 GH_token，下面配置文件中要用到，牢记！），勾选一些权限（只要repo就行了，还有email），这个token很重要，如果别人也有了这个token，你GitHub账户的repo就可能被任意修改！！所以不能外泄这个token！重要的事情就不说三遍了。不过如果外泄了，登录你的GitHub，删除这个token即可。 生成完后，拷贝下来，只有这时候才会显示，下载进来为了安全他就不会显示了，如果忘了只能重新生成一个了，拷贝完以后到Travis CI页面中 Environment Variables 进行配置。 现在 Travis CI 已获得 GitHub 访问权限，但它并不知道如何进行部署，所以还需要进一步设置。 在源代码分支（我这里即 blog-source 分支）下配置 .travis.yml 文件 1234567891011121314151617181920212223242526272829303132333435363738language: node_js #设置语言node_js: stable #设置相应的版本cache: directories: - node_modules #据说可以减少travis构建时间before_install: - git clone https://github.com/zpike/hexo-theme-apollo.git themes/apollo #自己配置一个主题，也是乐趣之一，特效什么的，不过我还是偏好简洁（Next主题用的人真是多啊）# S: Build Lifecycleinstall: - npm install #安装hexo及插件before_script: - git clone --branch master https://github.com/zpike/zpike.github.io.git public #获取最新的commit信息script: - hexo cl #清除 - hexo g #生成after_script: - cd ./public - git init - git config user.name \"zpike\" #修改成自己的github用户名 - git config user.email \"conan401@126.com\" #修改成自己的GitHub邮箱 - git add . - git commit -m \"update\" - git push --force --quiet \"https://$&#123;GH_token&#125;@$&#123;GH_REF&#125;\" master:master #GH_token就是在travis中设置的tokenbranches: only: - blog-source #只监测这个分支，一有动静就开始构建（我可能发一篇文章会push好多次，每次看到它忙着构建，感觉好浪费）。env: global: - GH_REF: github.com/zpike/zpike.github.io.git 大致结构就是这样，根据自己的需求还需要一点修改。 .travis.yml 配置完成，这个时候就可以push文章到你的 blog-source 分支上去了。然后其他工作都由 Travis-CI 来完成。 登陆Travis CI，不出意外的话（我出了好多次意外，不过最终皇天不负有心人！哈哈）Travis已经检测到变化并进行构建部署，log记录了构建的过程，出什么问题里面都可以点开来看。 常见问题配置文件如果出问题，基本都是配置文件的问题，yml文件的格式还是要求比较严格的，稍微不注意就不行。.travis.yml 文件的主要流程分三步，获取历史，生产静态文件，发布。 before_script: 在所有动作之前，先把 master 分支clone到./public文件夹，保留之前的 commit记录，把最新结果提交上去。 script: 就是 hexo generate的过程。 after_success: 在成功之后，成功都到了public文件夹下，然后就是照着git push到master分支下。 当然还需要确认travis build都在 blog-source分支下工作。 主题设置网上很多hexo的主题，有的还在持续更新，这个就需要在配置文件中clone 一下，保持更新，或者在package.jason文件中配置一下也行吧（没试过），还是在travis配置文件中设置一下，方便换主题。设置在 before_install 后面。 git命令这套方案弄完之后，在任何电脑，只要有git，就可以写东西了。git指令如何操作呢？ 新手可能会比较麻烦。比如我。虽然我很早就用过git，不过很多指令学了忘，忘了学。其实最好的学习就是不断使用，如果几周不用，再好的工具也记不住。比如vim或者emacs。 git新手建议看看廖雪峰的博客，还有git-scm，还有git-tower官网的很多教程，写得非常好，图文并茂，入门书籍的话应该无出其右了。 不过在写博客这方面，只需要记住几个常用的命令就行了。 1234567git clone git@github.com:zpike/zpike.github.io.git #先克隆git checkout origin/blog-source #默认是master分支，然后切换分支git checkout -b blog-source #本地新建一个博客源文件分支git add . #写完博客添加文件git commit -m &quot;xxx&quot; #加入commit信息git push origin blog-source #push到远程 记住以上必用的命令当然不够，为了更方便操作，还是需要多多记住一些常用的git命令。 如果在web上直接写文章的话，看下面。当然不建议这么做啦，不过如果身边没有设备的话，只有一只手机，那也没办法。灵感来了挡不住呀。 prose这个网站不错，很清爽，然后可以和Github 绑定，这样就可以直接在这上面写你的Pages博客了，写好直接save，搞定！。网页端暂时只有这个我比较满意。 好的客户端还在寻找中，如果Bear或者Ulysses支持就好了，或者好像Tower是管理GitHub的利器，不行也可以那里写，只是不知道markdown支持如何。 不过虽然可以直接写，但是很多Hexo的特性就用不到了，比如一些模版什么的，每次还要自己输入元数据，还是稍显麻烦。 总结现在终于可以anywhere, anyplatform, anyeditor都可以开始写作了，还是很不错的。要做的就是打开editor，然后写完push即可，不用操心其它，多美好！ 在工具的路径上是没有止境的，生命不息，折腾不止。 参考资料使用 Travis CI 自动部署 Hexo 使用 Travis CI 自動發布 hexo 到 GitHub pages 基于 Hexo 的全自动博客构建部署系统 用 Travis CI 自動部署網站到 GitHub(Hexo 作者写的)","tags":[{"name":"hexo travis","slug":"hexo-travis","permalink":"http://spikezz.com/tags/hexo-travis/"}]},{"title":"Chrome 插件推荐","date":"2016-08-12T06:00:05.000Z","path":"2016/08/12/chrome-extensions-recommend/","text":"自从科学上网之后，用Chrome的次数也明显增多。就目前来看，相对最好用的就它了，不过也分情况，如果只是简单上上网，又在 Mac 下，还是建议用 Safari，不然温度吓死人。不过最近升级之后没那么夸张了，Mac也不会太热。 下面说几个觉得比较好用的插件。(会保持更新，觉得一般的或者有可以代替的会说明) 首先要说的是翻墙，因为如果不是建立在翻墙的基础之上，Chrome的使用无从谈起。当然网上很多翻墙教程啦，我这里不多说，目前我用得最好的还是ss，几家做得好的，比如Linode，bandwagon，Vultr等。国内也很多，我目前用的chromegae的，速度不错，偶尔有些小问题。不管哪家服务，服务器位置比较重要。香港，台湾，日本，韩国的服务器比较好。 建议直接用路由器翻墙，路由里面的ss才是真的ss，即使小飞机已经很方便了，但还是会涉及打开关闭软件的问题，iOS平台目前还没有ss客户端，有个surge但是超级贵。所以关于如何翻墙，还是直接路由级别的翻墙才是真翻墙，这样你的ps4，你的电视里的youtube或者netflix，你的linux升级，都能享受到。你会慢慢感受不到墙的存在。 One Click Extension Manager — “快捷拓展管理-无广告版”，这个是用来管理你的插件的，根据自己当时的情况有的插件暂时不要用的，但是又不想删了的，可以用来管理下，非常方便。毕竟插件太多了，会导致占用内存太多，电脑变卡。 然后自己用的比较多的是印象笔记·剪藏，这个东西目前看速度最快，不管墙外墙内。还可以搜索之前的文章，配合 Google 搜索非常好用。裁剪的文章也可以放到固定的目录，简直完美。其他的如instapaper或者keep或者pocket等，都都没这个好用。建议只用一个此类收藏网络文章的软件，管理起来也比较方便，也方便记忆。 然后广告拦截也是非常重要的一个，这里我用Adguard广告拦截器，做得很好，功能强大，几乎全平台适用。不过有一些限制，付费买完整版的功能更多一点，不过自己也没用过，有兴趣的可以去官网看看，一年一百多，还不错。广告类的还有AdBlock，ADfree，不过目前有的视频网站直接检测到被拦截，还是要你等待，挺恶心的。不过其他广告拦截还是不错的。 还有查单词也是很重要的需求之一，都Google了，看下国外的各种网站当然是必须的，比如 New Yorker 之类，用的高级词汇还挺多，win下没有方便的查单词手势就用插件吧，Google Dictionary还不错，不过只能一次看一种语言的解释，而且还需翻墙。还有一个Ddict Translate，效果也很不错。 Stylish这个插件是美化一些常用网站的，比如baidu，zhihu什么的。效果很好，对视觉要求比较高的推荐使用，不过会带来一定的速度损失啦。 然后推荐一下WakaTime，这个是统计你在网上所用时间分布的插件，配合 Sublime Text 插件还可以统计你编程各类语言的时间，非常神奇。 开发类的插件众多，做前端的有很多非常好用插件，这里推荐 ColorZilla，找网站颜色比较方便。还有Web Developer，几乎什么都集中在里面了，神器。 Checker Plus for Gmail这插件还不错，可以提示你邮箱内的情况，很方便。不过最近出了个Black Menu for Google，整合了google的基本所有功能，用起来更方便。 Pushbullet，这个插件也不错，特别是你如果有几个手机，装一个这个插件，来电或者任何信息，都可以不用看手机了，直接电脑上可以看。当然这个插件还有其他功能，不过这个对我来说最有用。很推荐。 Diigo，用来收集网络文章之类，截图，做标记等。做得很全面，很不错。截图的还有Nimbus Screenshot &amp; Screen Video Recorder，做得也相当不错，很多功能，我还没怎么使用，先收着。 Ghostery，用来隐私浏览，看谁在跟踪你的网站浏览。 如果经常看wikipedia页面的话，建议用Wikiwand，效果很不错， HTTPS Everywhere，安全浏览。 JSONView，检查并查看json文件。 ReRes，用来更改页面请求响应的内容。通过指定规则，您可以把请求映射到其他的url，也可以映射到本机的文件或者目录。 Vimium，神器！值得学习一阵，熟悉vim的用这个会觉得很爽。 Mosh，据说比ssh更稳定。 JetBrains IDE Support，用jetbrains网页端的软件开发，用这个插件来测试。 Disable HTML5 Autoplay，有些网站自动播放视频很讨厌，比如facebook，这个插件解决这个问题。 眼不见心不烦，目前最好的新浪微博插件，不过还是建议用客户端吧，微博首页真是丑爆。 Musixmatch Lyrics for YouTube，youtube上看视频音乐，可以看歌词。 Magic Actions for YouTube，神器。基本你看youtube视频所有的要求它都有了。 Photo Zoom for Facebook，可以自动大图facebook。不过感觉facebook热度过了，最近很少登录了，网站感觉垃圾了，没什么可看的。 最后谈几个apps。 Telegram，wechat太乱了，这里还挺清爽，有营养的谈话比较多一点。不过现在居然也要翻墙了。 feedly，常用来看rss的，win上没有reedly还是用这个吧。 draw.io Diagrams，这个用来画画流程图，还是蛮方便的。","tags":[{"name":"Chrome","slug":"Chrome","permalink":"http://spikezz.com/tags/Chrome/"}]},{"title":"Hexo 搭建笔记","date":"2016-07-07T08:07:16.000Z","path":"2016/07/07/how-to-create-a-hexo-blog/","text":"很久以前看过阮一峰的介绍 Jekyll 做个人博客的文章，那时候还没用 Mac，所以也没法尝试。现在用了Mac之后想起来了，不过写博客还是挺费力的，没啥干货也不好意思出来唠叨。尽量写点有趣又有科技含量的东西吧，逼着自己更新知识库还是不错的。 Jekyll的官网虽然做得不错，但是流程我还没看明白，比Hexo的说明要复杂。所以下面就从弄Hexo博客开始吧。 这几天折腾了一个Hexo博客，并且部署到GitHub和Coding，而且租了个服务器，弄个了个人域名，过程中几个小问题搜了很多文章，但是也没能解决我的问题，还是挺费劲的。第一篇文章就用来记录这个过程我遇到的问题吧。 网上信息比较多，很多过期的文章，软件版本更新之后就不大能用了，PC和Mac下的区别较多，给新手会造成不必要的误解。 官网可以查到的东西我就不再写了，下面多写写自己这个过程中遇到的一些问题。 Hexo是一个台湾人弄的，不知道靠不靠谱，希望可以一直更新吧，毕竟用起来整体感觉还不错，轻快简单。 很多人推荐使用NexT主题，搜了一下发现好多人用这个主题，瞬间感觉没啥特点了。所以要想独特一点，有个性一点还是自己找个冷门点的主题改改，或者自己弄个主题，只要专注于写作就行。 安装过程比较简单，不说了。Hexo安装依赖于node.js，npm安装比较不稳定，开个VPN比较好一点。Hexo官网上面的文档挺全的，需要补充的就是主题的设置，还有网站的第三方服务的设置。 Hexo的配置都在_config.yml中，里面注释比较详细，不懂的查下官网，一般都知道怎么设置。需要注意的是文件类型是yml，语法要求比较严格，开头冒号后面必须空一格，不然不能识别。语法支持好的比如vim或者sublime，弄个插件，一般都能很好支持yml语法。还有这个文件要和主题目录下的同名文件相互区别，不要弄混淆了。 具体设置，比如language，中文简体的代码是zh-hans，其他设置试一下就知道了，一般默认就ok了。头像，logo什么的，弄个url比较好，或者放到Hexo的source目录下，这样Hexo g 的时候才能不丢失。 配置测试ok了，然后就可以写blog了。Hexo new 加文件名即可。这样就在source文件夹下新建了一个文件，写好标签和分类，就可以写正文了。网上有教你Hexo new之后直接打开编辑器的教程，这样就更方便了。直接在sublime中或者其他编辑器中写文章。需要注意的是Win下目录设置的问题。类似这样D:\\\\Program Files\\\\Sublime Text 3\\\\...。Mac中的话就比如这样&quot;/Applications/Sublime\\ Text.app&quot;，注意空格之前要加一个反斜杠。（不过Sublime并不大适合写文章，MWeb据说不错可以试试） 其实还可以使用Cmd Markdown在线写文章，然后导出markdown格式，再稍微修改即可发布了。不过过程稍微麻烦了点。喜欢移动写作的人，估计会比较喜欢。不过最近我将hexo固定到air上来写，所有其他电脑上的文件都删除了。这样还是更适合我一点。（当然在这之前，你还是可以尽量折腾，比如自动构建什么的） 写文章不满意，当然也可以删掉，但是Hexo没有提供删除文章的命令，所以手动删掉也行，不过我测试了一下，在删光文章的时候Hexo g会出错，一定要hexo new一篇文章才能进行Hexo g。 再然后就是配置主题什么的了。建议看看NexT主题的官网，里面有详细的教程，非常实用，很多官网没看明白的东西可以在那边看看。比如字体，图标，第三方服务什么的。主题其实也是个大坑，最近就不研究了。专注写作比较好。当然第三方服务可以看看，毕竟要用到不少，比如评论系统， 最后写好文章就可以推送到 github pages 上去了。GitHub或者Coding都不错，国内建议用Coding，速度很快。不过很多人遇到Hexo d的时候不成功的问题，我也被这个问题折磨了很久，网上很多回答都没有解决我的问题。 其实直接将public中的生成文件push到pages就行了，只是这样不够优雅。所以还是希望一条命令（Hexo g -d）解决部署，在Mac问题较少，Win用户貌似要多写点配置内容，不过基本用我下面写的配置内容一定可以成功的。 首先想要部署到GitHub需要安装一个插件，Hexo-deployer-git，这个插件里面的文档作用比各种网上的文件要有用太多，建议看看。最终解决我的Hexo d的问题就是看了那个文档。因为我是Win下Git bash环境，所以Hexo d会出现问题，配置文件中需要这样写： 12345678# Deployment## Docs: https://Hexo.io/docs/deployment.htmldeploy: type: git repo: git@GitHub.com:name/name.GitHub.io.git branch: master user: your_GitHub_username email: your_email_address 当然前提是你ssh密钥以及GitHub或者Coding上主页都弄好了，具体看下各个网站的详细说明，Coding上比较容易，GitHub 稍复杂，跟着帮助文档过一遍流程就更熟悉了。 还有hexo g的时候可能会出现一些常见的问题，比如什么DTraceProviderBingds之类的，貌似是npm的问题，我之前遇到过，不过瞎弄了几次，居然莫名其妙就好了，暂时不知道为啥。 国内的duoshuo不行了，只能换到disqus上去了，不过我的博客总是加载不了disqus的服务，不知道为什么。索性就不用评论系统了，但是会保持的更新的。继续完善每个主题的文章。 最后列一下这个过程中用到的网站，方便查询。 Hexo官网文档 NexT主题官方网站详细配置 Coding Pages使用文档 Hexo怎么优雅地插入图片 Hexo添加文章时自动打开编辑器 多说评论 Hexo进阶 ps：还有图床可以用iPic，Mac 上面很好用，或者在 Windows 上面可以用MPic，配合七牛都是神器。直接复制图片，即可在md文件中粘贴。 还有很多 markdown 中可以用到的插件，或者工具，会为你的文章添加更多色彩，这些我准备再多研究下，再写几篇文章。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://spikezz.com/tags/hexo/"}]},{"title":"单片机上电启动流程及相关配置详解","date":"2016-02-18T16:00:00.000Z","path":"2016/02/19/mcu-powerup/","text":"单片机执行程序的过程，实际上就是执行所编程序的过程，即逐条指令的过程。执行一条指令都可分为三个阶段进行，即取指令---分析指令---执行指令。取指令的任务是：根据程序计数器PC中的值从程序存储器读出现行指令，送到指令寄存器。 分析指令阶段的任务是：将指令寄存器中的指令操作码取出后进行译码，分析其指令性质。如指令要求操作数，则寻找操作数地址。 单片机执行程序的过程实际上就是逐条指令地重复上述操作过程，直至遇到停机指令、可循环等待指令。 单片机中的程序一般事先我们都已通过写入器固化在片内或片外程序存储器中，因而一开机即可执行指令。 下面用一个实例来说明指令的执行过程。 开机时，程序计数器PC变为0000H。然后单片机在时序电路作用下自动进入执行程序过程。执行过程实际上就是取出指令和执行指令的循环过程。 例如执行指令：MOV A,#0E0H，其机器码为“74H E0H”，该指令的功能是把操作数E0H送入累加器，0000H单元中已存放74H（该命令代表向A累加器写入立即数），0001H单元中已存放E0H。 当单片机开始运行时，首先是进入取指阶段，其次序是： PC的内容（这时是0000H）送到地址寄存器； PC的内容自动加1（变为0001H）； 地址寄存器的内容（0000H）通过内部地址总线送到存储器，以存储器中地址译码电跟，使地址为0000H的单元被选中； CPU使读控制线有效； 在读命令控制下被选中存储器单元的内容（此时应为74H）送到内部数据总线上，因为是取指阶段，所以该内容通过数据总线被送到指令寄存器。 至此，取指阶段完成，进入译码分析和执行指令阶段。 由于本次进入指令寄存器中的内容是74H（操作码），以译码器译码后单片机就会知道该指令是要将一个数送到A累加器，而该数是在这个代码的下一个存储单元。所以，执行该指令还必须把数据（E0H）从存储器中取出送到CPU，即还要在存储器中取第二个字节。其过程与取指阶段很相似，只是此时PC已为0001H。指令译码器结合时序部件，产生74H操作码的微操作系列，使数字E0H从0001H单元取出。因为指令是要求把取得的数送到A累加器，所以取出的数字经内部数据总线进入A累加器，而不是进入指令寄存器。 至此，一条指令的执行完毕。 单片机中PC=0002H，PC在CPU每次向存储器取指或取数时自动加1，单片机又进入下一取指阶段。这一过程一直重复下去，直至收到暂停指令或循环等待指令暂停。CPU就是这样一条一条地执行指令，完成所有规定的功能。 单片机上电后ROM与RAM执行流程简单介绍 ROM：(Read Only Memory)在单片机中用来存储程序数据及常量数据或变量数据，凡是c文件及h文件中所有代码、全局变量、局部变量、常量数据、startup.asm文件中的代码(类似ARM中的bootloader或者X86中的BIOS，一些低端的单片机是没有这个的)通通都存储在ROM中。 RAM：(Random Access Memory)用来存储程序中用到的变量。凡是整个程序中，所用到的需要被改写的量，都存储在RAM中，“被改变的量”包括全局变量、局部变量、堆栈段。 程序经过编译、汇编、链接后，生成hex文件。用专用的烧录软件，通过烧录器将hex文件烧录到ROM中。因此，这个时候的ROM中，包含所有的程序内容：无论是一行一行的程序代码，函数中用到的局部变量，头文件中所声明的全局变量，const声明的只读常量，都被生成了二进制数据，包含在hex文件中，全部烧录到了ROM里面。 此时的ROM，包含了程序的所有信息，正是由于这些信息，“指导”了CPU的所有动作。 ROM中包含所有的程序内容，在MCU上电后，CPU开始从第1行代码处执行指令。这里所做的工作是为整个程序的顺利运行做好准备，或者说是对RAM的初始化，工作任务有几项： 为全局变量分配地址空间 如果全局变量已赋初值，则将初始值从ROM中拷贝到RAM中，如果没有赋初值，则这个全局变量所对应的地址下的初值为0或者是不确定的。当然，如果已经指定了变量的地址空间，则直接定位到对应的地址就行，那么这里分配地址及定位地址的任务由“连接器”完成。 设置堆栈段的长度及地址 用C语言开发的单片机程序里面，普遍都没有涉及到堆栈段长度的设置，但这不意味着不用设置。堆栈段主要是用来在中断处理时起“保存现场”及“现场还原”的作用，其重要性不言而喻。而这么重要的内容，也包含在了编译器预设的内容里面，确实省事，可并不一定省心。 分配数据段data，常量段const，代码段code的起始地址 代码段与常量段的地址可以不管，它们都是固定在ROM里面的，无论它们怎么排列，都不会对程序产生影响。但是数据段的地址就必须得关心。数据段的数据时要从ROM拷贝到RAM中去的，而在RAM中，既有数据段data,也有堆栈段stack，还有通用的工作寄存器组。通常，工作寄存器组的地址是固定的，这就要求在绝对定址数据段时，不能使数据段覆盖所有的工作寄存器组的地址。 注意： 这里所说的“第一行代码处”，并不一定是你自己写的程序代码，绝大部分都是编译器代劳的，或者是编译器自带的demo程序文件。高级一点的单片机，这些内容，都是在startup的文件里面。 通常的做法是：普通的flash MCU是在上电时或复位时，PC指针里面的存放的是“0000”，表示CPU从ROM的0000地址开始执行指令，在该地址处放一条跳转指令，使程序跳转到_main函数中，然后根据不同的指令，一条一条的执行。 当中断发生时(中断数量也很有限，2~5个中断)，按照系统分配的中断向量表地址，在中断向量里面，放置一条跳转到中断服务程序的指令，这样，整个程序就跑起来了。 I/O口寄存器：可以被改变的量，它被安排在一个特别的RAM地址，为系统所访问，而不能将其他变量定义在这些位置。 中断向量表：中断向量表是被固定在MCU内部的ROM地址中，不同的地址对应不同的中断。每次中断产生时，直接调用对应的中断服务子程序，将程序的入口地址放在中断向量表中。 CodeWarrior执行步骤 初始化堆栈，堆栈是通过编译参数的传递过来的； 初始化内存，将内存清零，从ROM区复制数据到特定的内存区； 调用main函数 CW创建的工程包括以下几个部分： Sources文件夹下面放的是源代码，mian.c为主函数所在文件，若要新建源文件也要放在此文件夹下面。datapage.c文件为数据页面配置文件，一般写程序用不到，与编译有关，不可删除。 Startup Code文件夹下面的Start12.c文件是开发环境编译时默认的最先执行的一段程序，在Start12.c的最后调用main.c的主函数。在Start12.c中，创建工程所要注意的是对地址的重分配映射。 Linker Files文件夹下面的prm文件里面是关于整个工程在编译连接时的一些规则设置，在此文件中，要注意的是RAM和ROM的地址定义和堆栈大小。 使用监控程序进行程序烧写调试的方法说明对单片机进行调试、程序烧写可以有两种方式: 用BDM通过专门接口进行 利用监控程序通过串口进行 BDM方式是芯片厂商提供的调试、烧写方式，在MCU上留有管脚，通过仿真器将目标板和PC相连，PC通过Hiwave程序将程序通过仿真器烧写到MCU中。BDM的一大特点是需要专门的仿真器和开发环境，在没有仿真器或者Hiwave程序时就无法进行程序的烧写。 另一种方式是利用监控程序通过串口进行程序烧写的方式，不用专门的调试器，不用专门的程序就可以进行程序的烧写。 原理： 通过串口烧写程序就是用已经烧写在单片机内部的一小段程序，通过异步串行接口与PC机通信，把得到的程序数据写到MCU的Flash中。 已烧写进MCU的程序称为监控程序(官方提供)在提供开发板之前已用BDM烧写进MCU内。 由于监控程序的存在，单片机一些存储空间被占用，中断向量表的位置也要改变。 已有监控程序的单片机在运行时，首先运行的程序就是监控程序，监控程序首先会等待3秒，同时查询串口是否接收到任何数据，若接收到数据，就进入调试状态，通过指令进行程序烧写、调试。若3秒内没有从串口上接收到数据，就去执行用户烧写到MCU内的程序。 使用CW进行程序编写时的注意事项： 由于使用了监控程序，在进行程序编写时就要比平常多注意两个方面的东西，一是对整个程序存储空间的定义，一是中断向量的偏移。 程序存储空间的定义： 监控程序占用了$F000~$FEFF的存储空间，并且通过串口烧写程序时对此存储空间进行了写保护，故用户在写程序时要注意必须将程序编译连接至此存储空间中。为了解决此问题，要在prm文件中进行改动，如下：ROM_C000 = READ_ONLY 0xC000 TO 0xEEFF; 中断向量表偏移的处理： 监控程序将中断向量表从$FF00~$FFFF偏移至$EF00~$EFFF, 即用户的程序入口和中断程序的向量号需要改变。 程序入口的改变在prm文件中改动，如下：VECTOR 0 _Startup 改为 VECTOR 2048 _Startup各中断程序的向量号，需要在原来的基础上加上2048。 一般情况下Start12.c中的设置(利用监控程序通过串口进行) 在创建的CW工程中，Start12.c文件中没有对各存储单元进行地址重分配，造成了地址的重叠，为了解决这个问题，需要在Start12.c中进行一些改动，把各存储单元进行地址重映射，充分利用各存储单元。具体改变如下： 第118行：1234567#ifdef _HCS12_SERIALMON /* for Monitor based software remap the RAM &amp; EEPROM to adhere to EB386. Edit RAM and EEPROM sections in PRM file to match these. */#define ___INITRM (*(volatile unsigned char *) 0x0010)#define ___INITRG (*(volatile unsigned char *) 0x0011)#define ___INITEE (*(volatile unsigned char *) 0x0012)#endif 注释掉#ifdef和#endif开头的两行。416行改动一样。 prm文件的设置(利用监控程序通过串口进行) 在prm文件中，由于在Start12.c中进行了地址的重映射，所以要改动RAM和ROM的地址定义。另外，如果编写的程序需要较大的栈（比如多重的程序调用，中断嵌套），还要改变堆栈的大小。ROM的地址定义在一般情况下不用改变，但在使用监控程序进行程序下载、调试时，由于单片机里面本身已经含有一段监控程序，并且监控程序在烧写用户程序是对自己所占据的地址空间是自我保护的，所以在使用监控程序时要在prm中改动ROM的地址定义使用户程序不与监控程序冲突。 RAM的地址定义： RAM = READ_WRITE 0x2000 TO 0x3FFF; 若要改变堆栈的大小： 将STACKSIZE 0x100后面的0x100改为所需大小。 经过以上步骤，就可以建立一个可以使用的工程框架，就可以进行各用户的程序编写了。 在CW中指定堆栈大小及堆栈指针CodeWarrior自动生成的工程中堆栈指针的初始化机制打开CodeWarrior中的一个新建工程，在Start12.c文件中可以看到语句“INIT_SP_FROM_STARTUP_DESC()”，这是系统自动生成对堆栈指针的初始化语句。 这条语句是个宏函数，具体为#define INIT_SP_FROM_STARTUP_DESC() __asm LDS #__SEG_END_SSTACK;其中__SEG_END_SSTACK是由编译器根据配置文件自动生成的，从而达到按照用户要求配置堆栈指针的目的。 几种不同的堆栈的内存分布及配置方法 RAM区的开始是堆栈区，随后是数据区 这时堆栈区的大小由prm文件中STACKSIZE参数指定，而SP的具体值由编译器根据指定的堆栈区大小计算得出。 这个内存分布是新建工程的默认配置，是由prm文件中PLACEMENT区语句：“SSTACK, DEFAULT_RAM INTO RAM;”决定的。 当把语句换成：“DEFAULT_RAM, SSTACK INTO RAM;”时，RAM区的分布会变为开始是数据区，随后才是堆栈区。 而且，当不指定SSTACK在内存中分布时，即语句变为：“DEFAULT_RAM INTO RAM;”时，RAM区的分布也会变为开始是数据区，随后才是堆栈区. 堆栈区在RAM区任意位置 实现这种分布有两种方法： I. 利用prm文件 这时SP的值由prm文件中STACKTOP参数指定（需要用户自己添加），堆栈区的大小也需要在prm文件中自己指定，例子如下：1234567891011SEGMENTSMY_STK = NO_INIT 0xB00 TO 0xBFF;MY_RAM = READ_WRITE 0xA00 TO 0xAFF;MY_ROM = READ_ONLY 0x800 TO 0x9FF;ENDPLACEMENTDEFAULT_ROM INTO MY_ROM;DEFAULT_RAM INTO MY_RAM;SSTACK INTO MY_STK;ENDSTACKTOP 0xB7E 本例中堆栈区大小为从0xB7E到0xB00，SP的值为0xB7E。 注：在并不关注堆栈区的位置而仅仅关注堆栈区大小的情况下，CodeWarrior推荐用STACKSIZE的方式定义堆栈，即此时不推荐用STACKTOP的方式。 II. 在start12.c文件中自己指定 在函数_Startup的开始用语句：__asm LDS #VAR;(VAR为自己指定的SP的值)来指定SP的值，堆栈区的大小由prm文件中STACKSIZE参数指定。","tags":[{"name":"mcu","slug":"mcu","permalink":"http://spikezz.com/tags/mcu/"}]},{"title":"红","date":"2015-08-14T06:00:05.000Z","path":"2015/08/14/Rouge/","text":"最后看了这部红，是无意识的选择顺序，但是最终让我感到一种前瞻性，这个顺序很优化——《白》，《蓝》，《红》。 之所以特别提到三部曲的顺序问题，是因为其中有些地方是有交集的，虽然都是独立的不同故事。看了《白》中的某些画面，就知道《蓝》中人物出现时候的状况，《红》在最后才给出了三部电影神奇交汇的一刻。当然这都是后话，看电影的时候不可能注意到那么细微的地方，需要看过几遍，特别是Kieslowski喜欢用细节来联系整部电影，每个细节似乎都值得仔细玩味。 说《红》。一部画面大于对话的电影。不同的空间用红这一主色调联系起来，雅各布饰演的美天时候都会用到红色。樱桃，老虎机，床单，狗的项圈，照片，衣服，海报…不得不佩服导演细致程度。除了红色之外，褐色，橙色这些衍生色彩也出现较多，如果不看电影的内容，整部电影拍摄就足够精彩。 说到拍摄，虽然我没学过什么专业拍摄技巧，不过和其他电影比较起来，这部《红》让我看着觉得异常舒服自然且艺术。透过玻璃，利用反射，光线的柔和，镜子里面的重叠，视角上的变换，让这部电影加了不少分。 说到演员。雅各布被Kieslowski称为具有“超越时空”的表演才能。她的表演天真无邪，热情开放，和《蓝》中的朱莉完全不一样。这部电影也就只有她可以才最合适。不得不佩服导演的眼力，在雅各布还不是很出名的时候发现了她。 那个退休法官，也是个特别的人物，一出现就让人感觉到很神秘，虽然不知道他在干什么，但是相信这两个人之间一定会有某种化学反应要发生，可能是父女，或者老少恋之类，可惜最后只是含蓄的交代了两人的关系，没有给出一个结局。如果，美天的男朋友只是个小气的控制狂（事实证明他就是），美天对男朋友的爱也似乎一点一点消失，让人很是期待她和法官会发生一段爱情。 另一个时空的一对儿就没这么幸运了，虽然交错的情节让两个时空的人有了奇异的联系，但最终结果也挺悲哀。这段和《白》似乎有点像，女人背叛了男人，男人尊严全无。为了一个女人，男人搞得这么挫，那有何必呢？这里新任法官是不是个性无能无从考证，是不是他和美天会在船上相识也不知道。 同样，里面的老人丢瓶子的镜头让我不知道是为了什么，《红》里美天帮助了老人，难道体现她的善良？应该是的，《红》是最为深刻的一部，造成看完需要仔细想想，可能还要看一遍。探讨人性是本恶还是本善，这个问题也一直让我很纠结，一段时间我会认为性本善，可是过了些时日，看了很多的新闻，社会现实，性本恶又占据上峰。可能我永远不会像美天那么幸福的生活着。 说到三部曲，据说代表自由，平等，博爱。《蓝》是自由的，《白》表现平等，《红》自然表现博爱。导演借助法国国旗完成了一次人性剖析，很好，很强大。感谢Kieslowski，感谢Irène Jacob，Zbigniew Zamachowski，Juliette Binoche，自然还有无数在这三部曲背后的工作人员，可以让我们看到精彩的电影，感受电影的魅力。","tags":[{"name":"film","slug":"film","permalink":"http://spikezz.com/tags/film/"}]},{"title":"蓝","date":"2015-08-13T06:00:05.000Z","path":"2015/08/13/Bleu/","text":"之前看过Juliette Binoche的《布拉格之恋》，由于是由书改编，很多东西都不大好理解，所以需要看书去研究。这部《蓝》应该算是一部伟大的电影，原因之一是表现“自由“的主题。 说到”自由“，当然会想起很多东西，比如说某个强人在死前说了句：Freedom!!!然后就挂了。还有某位说了：不自由，毋宁死，然后也挂了。可见向往自由注定要付出代价。在现在的社会，各种各样的限制，人权意识有时也非常让人失望，谈“自由”似乎挺奢侈。 虽然自由非常不容易获得，虽然很多人的存在就是为了阻止你获得自由，虽然为了获得自由会需要很多牺牲，但是人是本该自由的。我所能想到最美妙的事情，就是生活在一个自由的国度，可以包容各种思想，各种各样的人互相无障碍交流，人们和睦互不侵犯对方的权益。 还记得《肖申克的救赎》里面Andy不顾监狱长的怒吼在监狱的喇叭里放音乐时，镜头划过正在广场上放风的犯人们和狱警们，他们静立着，抛却所有愤懑，狠毒和怨怒，沐浴着我从未觉得如此自由的阳光。那个镜头让我深深感动，每次看都感觉很振奋，我想那就是自由。 说到电影《蓝》，色调自然以蓝为主，忧郁的蓝色，痛楚的蓝色，梦幻的蓝色，绝望的蓝色，自由的蓝色。天空是蓝的，大海是蓝的，这两样事物代表宽广，包容和自由。所以用蓝色来表现自由再合适不过了。电影里面蓝色的灯，蓝色的游泳池，蓝色的饰物，蓝色的房子，蓝色的背景，蓝色串联整部电影。 车祸的开头，让人联想到导演的身世，由于他母亲出车祸死去，他便经常在电影里出现车祸的镜头，《红》里面也有车祸的镜头，只是没有这里的悲惨。一下子，生活全部改变。一刻前你们还在欢笑，一刻后惨剧就这样默然发生，和自己相爱的人永世分隔。让我想起《巴别塔之犬》感人至深的故事，那许多的意外，或许真是冥冥中注定。 偶然的车祸，惨痛的结局。 朱莉的故事由此开始。 失去一切，性情大变，想要寻死，突然醒悟，寻找寄托，毁掉一切，从新开始，努力忘记，发现背叛，宽容大度，涅磐重生。 这部《蓝》和其他两部拍摄的风格有些变化，主要体现在场景变换上，可能是我个人的看法，觉得场景变换得非常快速。朱莉冷漠地寻找生活的寄托，一会儿出现在饭馆，咖啡店，古老的房子，游泳池，场景的不断变换，人物的心情改变推动故事的发展。 还有注意到拍摄的一个细节。就是大量运用黑屏，好在不是蓝屏。人物出现重大思考或者悲伤的时候，都会黑一下，反复几次。这个在我看来很不错。《白》里面是在一个激情戏的时候用了。这里有的时候，用得更加多。在朱莉游泳之后，被妓女发现，问她是不是在流泪，出现了闪黑屏。作用估计一方面是给观众思考的时间（哦，原来她前面在游泳的时候是她哭泣的时候），朱莉的坚强立马体现出来；另一方面，是人物的心理变化，给观众一个直观的痛楚体验。 朱莉发现丈夫的情妇这个情节，一方面表现朱莉的大方和宽容，一方面估计是照应其他两部电影，都有关于背叛爱情的情节。 … 好的电影就是给观众看了就可以让观众不断思考，不是玩弄观众，也不是让每个人都思考得一模一样，你可以有自己的思考，不管思考了什么，你都会很有收获。 《蓝》的伟大就体现在这里,希望，自由,宽容，思考。这一切在不知不觉中就完成了，我想好的艺术就应该这样。 ps：写于零九年二月","tags":[{"name":"films","slug":"films","permalink":"http://spikezz.com/tags/films/"}]},{"title":"白","date":"2015-08-12T06:00:05.000Z","path":"2015/08/12/Blanc/","text":"三部电影，先看了这部。于是一直想这个“白”代表什么呢？难道基什么什么斯基只是为了这三部电影搞出的名堂？ “白”可以联想到“白痴”，“干净”，“残酷”…看完电影，“白”似乎多了好些个意思，基斯基似乎很喜欢玩文艺，搞得电影唯美又文艺又残酷又深刻。 整部电影在巴黎拍得较少，在法庭被鸟、法官、前妻羞辱的一段，在发廊计划将要得逞男主人公早泄的一段，地铁站和玩牌高手对话的一段，再加上打电话给前妻自尊心受到无情打击的一段。 之后非常之搓的被放到行李箱里运回波兰，但坏运气没有消失。直到混到没法再搓的时候，给了玩牌高手那个空枪后，开始走运了。 那个两法郎的硬币起到了关键的作用，出现在几个重要的镜头。开始在地铁向一服务员发怒，终于得到了被吞的两法郎。后来被抢劫，两法郎也没人要，被人打了一顿，也算是奇遇。后来想要扔了这两法郎，却没成功。硬币竟然粘在手上，实在奇特，似乎冥冥中他要走运的预兆来了。他也开心了，充满信心开始他的复仇计划。最后出现是计谋让人以为他死的晚上，把硬币丢入棺材里。 电影穿插的他们结婚的场景出现了好几次，和他前妻的头像一样，都可以看出确实他还挺纯情。爱之深，恨之切。所谓“要想让一个人记住你，那就去折磨他吧”，他确实被折磨着，人的潜在受虐意识让他更加深爱他的前妻。前妻在接到他梦醒之后从波兰的电话，什么也没说，挂断。于是，给了她一个内疚的理由。葬礼上的落泪，一下子让我喜欢上了这个人物。虽然老公性无能，长得挫败，虽然和别的男人搞得很爽，但依然没有忘记他，反而深爱着他。在旅馆激情的一夜后，他用实际行动证明了他不是性无能，而且让她非常愉悦地呻吟，实在佩服。现实果然证明，女人是身体上的动物。 照着我们的思路，他应该会和她从此永远幸福的生活在一起了呀，可是，这样就太俗了。这么一文艺的电影，结局是个关键。 从他微笑的注视着她的镜头，一点没有看出什么阴谋。不久她被捕，被捕时她充满希望认为他没死，结果..唉，怎么忍心伤害这么一个美丽的女人？ 他依然深爱着她，她也依然深爱着他。然而，监狱的铁窗，那么无情地树立着。最后她的手语，看了两遍，愣是没明白具体什么意思。估计是爱啊，恨之类的。多么悲情，多么感动，难道你看到这还没哭出来么？反正我是没哭出来，只是在他深受打击的时候眼角湿润了下。结局这么这么这么残酷，但作为电影美妙得不可思议。 PS:电影里面有个老人将酒瓶放入垃圾箱的镜头，不知道有什么含义。在《蓝》里面也有。难道斯基想推广下这种垃圾箱？还有《蓝》里面的女主人公在里面也有个镜头，只是比较模糊，看的时候注意到了，只是没有确认。构思实在精巧，佩服！佩服！ pss: 这个影评写于2009-06-12，当时看了这部电影感觉非常好，忍不住出来写了自己第一篇影评，总共在豆瓣上写了22篇，我挑几篇还可以的，放在这里大家看看。","tags":[{"name":"films","slug":"films","permalink":"http://spikezz.com/tags/films/"}]},{"title":"静默之火","date":"2015-08-10T06:00:05.000Z","path":"2015/08/10/silent-fire/","text":"第一次听到Nick Drake的歌是在某个初中的时候，当时鬼使神差地买了一期『音乐天堂』，其原因无可否认是因为封面上的性感美女。我当时对音乐没什么兴趣，而且杂志的价格对当时的我来说，还有有点压力的。 那期杂志是我认为做得最好的一期，虽然后来也间断性地买了几期，但是都没听到那一期时少有的感动了。那期里面有首Nick的Northern Sky，当时听着也没觉着多好，很简单的一首民谣。那期的卡带我听了无数遍，最后卡带都听坏了。里面很多经典的歌，但现在我只记得这首northern sky，那种飘忽的旋律一直挥之不去。 当时杂志里面关于Nick的文章的题目就是“静默之火”，还有一张他的超大照片。听了他的许多歌后，觉得静默之火是蛮贴切的。 Nick又是一个梵高式的人，生前总是不得志，遭到市场的冷遇，让他心灰意冷。死后他的三张专辑却被公认为民谣的经典之作。当然他死后依然没有梵高死后出名，不然梵高要被称为Nick式的人了。 有乐评说他是个在月亮上唱歌的人，声音总是漂浮在空中。还有人说，他个歌像水雾，阴郁，潮湿，挥之不去。这些特点在Northern Sky这首歌里面体现得尤为深刻，这是他的第二张专辑「Bryter Layter」里面的一首歌。这张专辑有点JAZZ的风格，听着感觉很舒服。这是他离开剑桥移居伦敦后创作的。里面依然是和第一张相同的忧愁和封闭的感觉，虽然加了一些欢快的节奏，但是听着忧愁依然。这张专辑还是没得到市场的认可，巨大的打击让Nick的精神状态每况愈下。之后的Nick更加疏离人群，仿佛要将自己世界隔离出来。 在极度严重的抑郁症和强烈的孤独感之下他完成了他的第三张专辑「pink moon」，黑暗晦涩的风格，整张专辑散发着空洞苍白而又令人恐惧的美。这也是他最出色的一张专辑。 他的精神变得反复无常，生活更是一团遭。最后因服用过多的抗抑郁药物而死在自己的床上，生命最终定格在26岁。 短暂的一生，留下了弥足珍贵的三张专辑。低调的一生，给人们带来无尽的思考。 他一直追求时代的认可，努力写出完美的曲子，极度苛刻的对待自己和他的音乐，他脑中的音乐仿佛等待要被写出，他的一生仿佛就是为了写出那些惊世之作。 一直以为他的音乐是嗑药之后创作出的，那种极为晦涩的感觉也只有站在月亮上唱歌的他才能深刻的表现。 他无法正视自己的内心，他唯有孤单的拿着吉他，唱出自己对生活的理解。一切在他看来都是虚幻的，浮华背后脏乱不堪。所以他唱道：名誉是棵生了病的果树，一生等不来一树繁华。 听Nick Drake的歌是孤单的，站在月亮上唱歌的孤单。失望造成的绝望，对生命的绝望，对社会的绝望，他能做的只有坐在空旷的房间独自弹着吉他，向自己的内心表达着一切。 ps：这篇文章是好像高中，大学初期写的，当然很多幼稚的感想，关于乐评还是很难写的，看了很多杂志，网上的文摘，查阅各种资料等，记得当初喜欢马世芳的文章，那种随意自如又情深意长的文章不知道何时写得出来。","tags":[{"name":"music","slug":"music","permalink":"http://spikezz.com/tags/music/"}]},{"title":"Sina 博客整理","date":"2015-08-01T06:00:05.000Z","path":"2015/08/01/sina-blog-organize/","text":"既然这里是我的博客空间，那很久以前写的博客也可以放上来嘛，虽然很久了，看起来很幼稚，好似不是我写的，不过还是值得留念。 博客刚出现的时候，在新浪写过，不过那个空间各种丑陋，写了一些就没写了。之后在blogbus写过，那里蛮清爽，不过之后好像不能访问了。今天用帐号一登陆，居然都还在。还有QQ空间，写过一阵，也可以弄过来，凑凑字数。 下面是新浪博客上的一些文字，比较少，很多都是一句话也没啥营养的那种。稍微找几篇还能瞧一瞧的吧。 七尺屋房内，浩然成昆仑。与绛缘生定，羡煞旁观人。恣肆一围城，傲然超绝伦。苦运管锥编，奇书踏无尘。老至惜就暮，从此中华沦。钟书终不见，断恨洛阳城。楚狂人『恨不见钟书君』2006-04-23 居然第一篇是当时写的一首诗，当时比较迷钱老，然后突发奇想写了个打油诗，不过还好，不是太难看。哦我当时的网名叫楚狂人。 南园肆雨水涨萍，恣酒纵歌月夜明。人生自古谁如意？只把春水作旧情。『春逝』2006-04-23 感伤莫名的年纪。 黑云压孤月，星稀花雨非。战场烽烟起，佳人梦方觉。滚滚东逝水，江河笑是非。缺月梧桐雨，恋恋红尘醉。『对月抒怀』2006-04-23 个人比较喜欢的一首吧，至少押韵。 杀气冲云天，烈火吞谗颜。寒风吹皱理，浊气破胆边。肃秋夹风鼓，杀生未可数。酒肉壮豪情，金甲添威武。歌舞不解愁，唯有觅封侯。生擒胡虏首，共报生死愁。『燕歌行』2006-07-01 估计是刚学完辛弃疾的诗词吧。 春日不意来临，弹奏伴着低吟。春水流向森林，沿着河畔徐行。白色梨花满树，梦境萦绕浓雾。痛感你的失去，往昔难以再续。鹅绒飘转反复，弦音乍断如固。曲终寂静人散，回望夕阳如肃。『无题』2007-07-31 这个估计是读到李商隐吧。 一朋友推荐我看一本书，叫《童话》，于是看了一遍。此书相当不错，文笔很好，又充满趣味，而且不知不觉明白一些道理。里面有句“鸟大了，什么林子都有”很耐人寻味，“选择爱情，只是选择一种生活”作者能很到位的表现，足见其在时代中关注的力度。最为难得的是对人物心理的把握很感人，语句的诗化，让小说更具文学性。关于故事情节，他（她？）采用了插叙，很多东西看前面觉得莫名其妙，到后来才知道怎么回事。一开始我看那个林晓怎么遇到那么莫名其妙的事，想是作者的疏忽，最莫名其妙的是曾默莫名其妙的死了，最后知道那是一个梦而已……又暗合了题目《童话》，不禁释然。 当时看的一本小说，至今都觉得不错。可惜情节记不大清了。 爱国需要激情，更需要理性；在表达义愤的时候，难免有一些过激的言词，但义愤的宣泄不应超越法律，非理性的无序举动不仅无助于揭露日本右翼的真实面目，反而会授人以柄，给右翼分子攻击中国、欺骗日本民众增加口实，甚至伤害一些真心与中国友好的朋友。中国的发展需要一个和平的环境。作为邻邦的日本对历史反思不足，对中国实力的增强又持怀疑态度，这无疑会带来一定的麻烦。但是，随着经济全球化的不断深化，中日之间的联系更加紧密也是大势所趋。目前，中日之间经贸交流数额很大，今后无论是在经贸还是在文化等许多方面，交流的层次还会不断加深。这就会为促使日本做出深刻的反省创造条件。当年法、德两国人民能够消除隔阂，与德国政府的道歉与反思有关，也与欧洲一体化的进程，与两国在政治、经济、文化等多方面、多层次的交流，特别是民众之间的深入交往有很大关系，后者更是增加双方互信的基础。因此，要促使日本能够以史为鉴，就不是只宣泄一下愤怒的情感能解决得了的问题，还需要我们促进更广泛的交流，更多地展示理性的力量。要用这种力量来让日本人民，让世界人民更多地认识日本右翼的真实面目和危害，营造一种让右翼难以生存的国际舆论环境。因此，激情加理性才是我们表达爱国热情的正确态度。2007-08-20 小子我当年也很爱国的，当然现在也爱。 新浪博客就这样吧，其他文字都不值一提，写得相当草率。接下来把QQ和blogbus的都弄一下，那些才是有代表性的文字。 PS: 去QQ空间以及Blogbus看了看博客内容，qq的大多垃圾，blogbus的太多了，一共一百多篇，不过写的基本都是流水账，看看，还是思绪万千的。不过转过来太麻烦，也和这个博客的格调不搭，就不弄过来了。还是继续前进吧！","tags":[{"name":"diary","slug":"diary","permalink":"http://spikezz.com/tags/diary/"}]},{"title":"川藏游记","date":"2015-07-12T06:00:05.000Z","path":"2015/07/12/trip-to-tibet/","text":"这篇流水账是大约毕业后一年和好友去西藏旅行是途中所写。当然没什么任何攻略的价值，也估计没有任何文学价值。只是途中用手机记录下所思所想，其实可以记录的东西还是很多，只是过了这许多时候，感觉也懒得去记录了。其实西藏拉萨什么的，基本是被文青炒作起来的，真是情况没那么美好。只是走过一遍那条国道，还是觉得蛮不虚此行的。 Day1今天中午从成都出发 去拉萨 先到雅安 不过很难搭车 因为在高速路口 最终买车票去的雅安 后来听说真的有两个驴友成功搭到车 真是佩服。到雅安后步行十几公里终于搭上去天全镇的车 是辆宝马 师傅是个在天全做建筑的老板 途中遇到两个北京的驴友 一男一女 然后结伴而行 一路汽车尾气 灰尘好多 不过景色还行 姑且忽略刚上路的不适。 晚上到天全住在一个小客栈 洗澡 吹空调 感觉到不一样的惬意。 Day2今天从天全出发去雅江 途中经过泸定 康定 康定很漂亮 沿城有非常清澈湍急的河流 空气很清新 可惜没时间停留。 早上走了几公里搭上一个去康定的大货车 司机是藏人 很年轻 21岁 和我聊了很多 了解他们生活的艰辛 川藏线上只能靠跑运输挣钱 因为另外三个驴友后来搭上量卡宴 速度很快 早到了康定 所以我在二郎山下车搭了另一辆速度快的6人坐的商务车 司机真是好人 搭了一车驴友和在康定工作的人等。 从康定去雅江的路上搭到一个面包车 司机依然是藏人 沉默寡言 但是人很好 搭我们到一高山处大概有四千米左右。 后来我们四人幸运得遇到一个丰田SUV车队 搭我们四人速度到了雅江——一个傍山而建的小城。晚上在雅江一个居民家住宿 一人10元 非常实惠 不过吃的东西比较贵 估计是看游客抬高物价。 Day3今天搭车比较困难 搭到一辆别人包的车 比较挤 不过藏民很热情 解答很多我的问题 下午才到理塘——世界第一高镇 大概4500米左右。不过小镇据说治安很乱 不敢停留 继续往前 傍晚搭车到去理塘和巴塘中间一个乡 晚上睡在一个藏民家中 藏民自己弄的驴友宿舍 比较简单 但是风景不错 草原大山 空旷寂寞。 Day4今天高反严重 晚上睡得非常痛苦 头非常疼 一阵冷一阵热 虚汗频频 早上很早就醒 天还很黑 因为有几个小时的时差 一直等天亮 吃过早饭 顶着身体各种不适继续前进。从乡镇出发往巴塘方向 走了很远的路 一直搭不到车 沿途看到很多驴友在路上的留言 搭车搭到绝望大概就是这样了 川藏边境搭车非常困难 一直往高处走 高反越来越严重 走了大概有30公里 实在走不动了 做好了住在草原上放牛的藏民家中的准备。一路许多骑行的 经过我们都给我们加油 我也实在是坚持不了 坐在路边休息。大约傍晚的时候 拦下一个去巴塘方向的需要付钱的车 一路景色非常壮观 可惜身体非常累 没心情看。 晚上到了巴塘 很多骑行的 青旅基本都住满了 旅店中认识两个成都的 他们旅行要结束了 因为其中一个的车被落石砸中 完全报废 万幸人没什么事。 明天准备去芒康，估计也难搭到车 还要花钱包车去 唉。 Day5今天一早从巴塘出发 直接花钱去芒康 难搭车的地方千万不要走路 不然就扑街了。 一路经过金沙江 西藏界 然后到了芒康 西藏境内的第一个小镇。没有停留 继续前行 到了左贡 在检查点搭车 很多车辆 但是几乎都满人 很多驴友在那边等 成功率非常低 很多人等不及就坐花钱的车去了 我们四人等到傍晚 终于一个大叔载我们走了100公里 在离左贡70公里的一个小地方住宿。 大叔是云南的 在这铺路 跟我们讲了很多318国道的故事 铺路的艰难 很多人为之献身 但是路况依然很差 虽然比几年前好很多 但是每年都有许多伤亡。晚上住在沿途驴友之家 条件艰苦 但还远比周边藏民生活舒服 晚上下了大雨 不知道明天路况会不会比较糟糕 但愿一切顺利。 Day6今天很糟糕 在登巴村等了很长时间车 终于等到一去左贡的皮卡 到了左贡吃了很难吃又贵的成都小吃 饭店老板说他们一年只开店三个月 其他月份都休息 可见旺季西藏旅游的利润。 在左贡出口等了半天 一辆愿意停的都没有 虽然自驾游的很多 但估计搭车的驴友太多 他们也就免疫了 下午又开始下大雨了 今天只有住在左贡了 等待明天的到来旅程走了一半 几个旅伴出现了不同的声音 有的要包车快点走 有的愿意继续等免费车搭 对我来说时间成本很大 但是旅途又不能轻易放弃 毕竟都坚持了那么多天了 所以现在是最困难的时候 下雨还是一个不确定因素 路况不知道会恶劣到什么情况 但愿一切安好 天下太平 Day7今天直接从左贡坐车到然乌 司机是个藏族汉子 开车很彪悍 他说他昨晚没睡好 看着很困的样子 一直喝红牛 司机开到99拐的时候非常的吓人 那段路估计是川藏线上事故出最多的地方 从山顶道山脚走了一个多小时 据说有99个180度的大拐弯 但是我们感觉明显更多。 司机一路遇到各种熟人 都要聊几句 估计是他们藏民的习俗 非常热情。傍晚才到然乌 然乌是个很小的地方 有个看起来一般的然乌湖 污染也严重 当地不知道保护自然景观的重要 直接断了后路 这种小破地方住宿居然贵了起来 应该也是发旅游财 估计是快到拉萨 所以物价也贵 名字很好听的然乌 其实很没意思 但是沿途也这一个地方可以住了 权当体验生活吧。 Day8今天早上从然乌去波密 然后下午去八一。 去波密很近 路也很好走 到了波密 吃了个水饺 继续找车去八一 废了好些功夫 才找到可以去八一的车 中间要经过通麦天险 所以比较担心 一直在下小雨 不知道会不会塌方 到了通麦附近 果然塌方了 很多车堵在路上 估计要等好几个小时 游人打牌的打牌 吃饭的吃饭 各种打发时间 晚上天黑之前终于通车 不过通了之后还是单边放行 我们的方向一直到半夜11点左右才让走 司机拼命往前走 完全无视天险的存在 路非常非常难走 估计是川藏最难走的一段 颠得我灵魂出鞘 而且颠簸路段长达30里 并且路很窄 左边下面是江 没什么保护措施 右边是不知何时会塌方的山 因为晚上 什么也看不清 所以害怕程度还一般 郁闷的是一直想看看通麦如何的险 到了这边偏偏是深夜 天意弄人啊 接着深夜上山下山 到凌晨2点多才到八一 然后找住的地方 接近拉萨 住宿越来越贵 质量也差 没办法 省钱重要 林芝据说很美 不过是夜晚 什么也观察不到 明天在欣赏它吧 Day9今早从八一往前走 一路看到的八一和沿海三线城市很像 不过也有特色 走走停停 风景还不错 等了大概半个小时 一个私家车停了下来 不过要收费 价格比大巴便宜很多 也值 上吧 司机是一在拉萨教书的老师 完全没有给我老师的感觉 非常世故的年轻人 在西藏上的大学 然后教书 待遇比内地好多。 一路风景没给我什么惊异的感觉 路段限速 所以开得比较慢 8个小时到了拉萨 接近拉萨的地方挺激动 终于感觉要到了 也有淡淡的失落 路途要结束的感觉。 到了拉萨赶紧去找青旅 东措很好找 很多游客聚集在周边 进去感觉很特别 和住过的大部分青旅都不一样 是个非常值得一住的旅馆 有个28人间的房间 真是壮观 不过我们住的地方显得没有他们牛逼 很难找 不过也安静 适合休息 晚上出去吃东西 然后去周边酒吧 现场演唱 藏族歌曲 感觉feel不错 不过妹子不多 都是老男人 所以纯粹听听歌吧 艳遇就不要想了 Day10今天先去布宫看了看 可惜票紧张 不能立即进去 就在外面拍了拍照 然后去了大昭寺 游客太多 人挤人 朝拜的藏民很多 虔诚得让人无法理解 寺里很多菩萨 喇嘛 还有佛祖的像 远远的看看 听听导游的讲解 感觉藏传佛教也没什么太大意思 神神佛佛的看多了都差不多 大昭寺周边很多有意思的店 东西大部分价格虚高 需要你下狠心还价 晚上拉萨开门的基本都是酒吧 人很多 惬意得很 和想象中的圣地有些差距 不过还是很有意思 住个一周左右也不腻的感觉 Day11今天去了哲蚌寺 很大的一个寺 依山而建 很多可参观的地方 人比大昭寺少得多 所以感觉很有意境 拍照也比较容易 里面很多藏民在神佛面前浇奶啊油啊什么的 味道挺不习惯 一毛钱很多 挤在佛像的面前 让我觉得人的愚昧 蒙牛伊利的牛奶也很多 被僧侣倒在佛像前的漏斗内 然后留下去 再倒掉 哲蚌寺的建筑风景很不错 拍照拍得很多 下午有辩经活动可以看 僧侣辩经很热闹 围观的不明真相的群众拿着相机拍来拍去 谁会对他们辩论的内容感兴趣呢。 晚上去吃了拉萨比较出名的一个饭店 主打尼泊尔印度特色 试了个出名的一个菜 嗯 很好吃 比藏餐好太多 回东措的路上去一个店买了个珠子 店主开价五百多 我还价200 最后店主竟然卖了 让我怀疑还是被坑了 在拉萨买东西真是需要一个向导。 总结：前后花了大概14天在成都和拉萨之间，感觉到很多不一样的人文，不一样的景色，一次比较彻底地旅行，虽然沿途让身体很累，很不习惯，但是克服之后的舒畅却是别样的喜悦。各种之前听说的藏民，见到了才有真切的印象，感受到他们生活的艰苦，信仰的崇高，这些东西我们缺乏得厉害。What you see is what you get. 现实中看到会触发很多思考，大概也是一种修行，追寻内心的平静，达到一定的境界，这些在圣地似乎会容易一些。","tags":[{"name":"trip","slug":"trip","permalink":"http://spikezz.com/tags/trip/"}]}]