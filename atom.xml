<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZHOU</title>
  
  <subtitle>the only limit is your imagination</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhzhou.me/"/>
  <updated>2017-07-16T15:01:15.000Z</updated>
  <id>http://zhzhou.me/</id>
  
  <author>
    <name>Spike Joe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm 简介</title>
    <link href="http://zhzhou.me/2017/07/07/what-is-npm/"/>
    <id>http://zhzhou.me/2017/07/07/what-is-npm/</id>
    <published>2017-07-07T01:57:35.000Z</published>
    <updated>2017-07-16T15:01:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着JavaScript的流行，相关工具的使用也变得非常重要。npm是出现的一个小公举，类似的工具还有Yarn，不过目前npm还是更加普及一点。稍微查了下他们的区别，说是Yarn更好一点，更多大牛更加推荐。不过很多项目用的还是npm管理，比如之前介绍的hexo的安装包。</p><p>npm全称是node package manager，所以它本质上就是个包管理器。类似mac上的神器，brew。不过npm只是用来管理nodejs的。这样开发js应用的时候，就可以大量使用前端库，并且保持较好的版本控制。为什么说“较好”，版本控制是个坑。很多构建的问题，据说都可以归到npm的头上，使用Yarn貌似能解决这一问题。</p><a id="more"></a><p>要使用npm首先要安装node，Mac中用brew先安装node再说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><p>查看一下版本号，发现npm不是最新，然后更新一下npm，怎么更新呢？用自己更新自己！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g npm</span><br></pre></td></tr></table></figure><p>你会发现有个-g参数，这个参数是用来全局安装npm的，不过很多插件都是本地安装的，比如很多项目才需要的插件，安装在全局会很乱，也不好管控各种版本，但是又有的插件经常用到，比如grunt-cli之类，就需要安装在全局。所以原则是，依情况而定。</p><p>一般来说下面几个是建议安装在全局的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g coffee-script</span><br><span class="line">$ npm install -g less</span><br><span class="line">$ npm install -g grunt-cli</span><br><span class="line">$ npm install -g gulp</span><br></pre></td></tr></table></figure><p>先看看，这些工具暂时用不到的就不用研究，用到再学习不迟。</p><p>然后是npm的包安装。命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i &lt;packagename&gt;   //安装在当前目录下</span><br><span class="line">$ npm i -g &lt;packagename&gt;  //安装在全局</span><br></pre></td></tr></table></figure><p>这样是一个个包分别安装，太麻烦了！ 怎么批量安装呢？ 装过hexo的都知道，目录下面有个<code>package.json</code>文件，这个文件就是用来配置需要安装的包们的。打开看一下，发现好复杂！不过稍微仔细看一下，发现depedencise下面就是包名字加版本号。然后在目录下面运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save  //--sava用来修改json文件的包依赖关系</span><br></pre></td></tr></table></figure><p>就会在当前目录下面安装所有的包至node_modules这目录下面了。</p><p>更新安装的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm outdated [-g] //查看哪些过期了</span><br><span class="line">$ npm update [-g]  //更新包</span><br></pre></td></tr></table></figure><p>手动维护package.json中的包版本实在麻烦，介绍一个插件，npm-upgrade，这个插件可以检查json文件中包的版本号，然后更新。</p><p>不过npm社区真是日新月异，好多包之前装的，更新一下发现都“deprecated”了，前端真是前景巨大啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着JavaScript的流行，相关工具的使用也变得非常重要。npm是出现的一个小公举，类似的工具还有Yarn，不过目前npm还是更加普及一点。稍微查了下他们的区别，说是Yarn更好一点，更多大牛更加推荐。不过很多项目用的还是npm管理，比如之前介绍的hexo的安装包。&lt;/p&gt;
&lt;p&gt;npm全称是node package manager，所以它本质上就是个包管理器。类似mac上的神器，brew。不过npm只是用来管理nodejs的。这样开发js应用的时候，就可以大量使用前端库，并且保持较好的版本控制。为什么说“较好”，版本控制是个坑。很多构建的问题，据说都可以归到npm的头上，使用Yarn貌似能解决这一问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="npm js" scheme="http://zhzhou.me/tags/npm-js/"/>
    
  </entry>
  
  <entry>
    <title>git checkout 的使用</title>
    <link href="http://zhzhou.me/2017/06/02/git-checkout-usage/"/>
    <id>http://zhzhou.me/2017/06/02/git-checkout-usage/</id>
    <published>2017-06-02T07:33:08.000Z</published>
    <updated>2017-06-06T01:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git命令中，我个人感觉最重要的命令就是<code>git checkout</code>了。这个命令简单来说是Git的精髓–分支管理。当然对新手来说也是比较难以理解的概念之一。记得刚开始用git的时候，<code>git checkout</code>这个命令还是蛮令我困惑的。困惑之一就是远程分支和本地分支的管理上。比如怎么把远程不同于<code>master</code>分支的东西弄到本地，怎么在不同分支之间切换自如，利用分支的优势为自己开发所用等。</p><a id="more"></a><p>首先，<code>git checkout</code>一般和<code>git branch</code>配合使用。不过也可以直接<code>git checkout -b</code>，即“创建并切换分支”。</p><p>一般做改动，建议直接创建一个分支，因为在master上直接改动，万一搞乱了，虽然可以时光倒流，但是毕竟还是保持几个版本比较方便，新的特性也能方便的做对比。这个就是为什么git项目文件夹可能很大，但是进去文件夹发现没什么文件的原因。因为其它分支都被”隐藏”起来了嘛！</p><p>一般教程也就到这就结束了，其实还有很多常用的东西没讲。比如远程上面有个分支，我想弄到本地来。经常遇到的一个情况就是远程上面的某个分支有我需要的内容，我怎么获取到本地呢？</p><p>先看一下远程有哪些分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><p>然后拉取远程分支，并创建本地分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure></p><p>如果想远程分支名和本地分支名一样，也可以用 <code>--track</code> 这个选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -t origin/&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>以上当然也可以用<code>git fetch</code>来做，区别只是会先fetch到repository，然后手动切换到工作分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line">git checkout &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>远程操作上可能会出现很多问题，比如什么merge conflict之类，新手可以打开gitk看看，还有tower神器。不过感觉还是要先了解命令行，才能更好的用这些图形化界面。有点鸡生蛋，蛋生鸡的味道。</p><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">阮一峰博客</a></li><li><a href="https://git-scm.com/docs/git-checkout" target="_blank" rel="noopener">Man Page</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git命令中，我个人感觉最重要的命令就是&lt;code&gt;git checkout&lt;/code&gt;了。这个命令简单来说是Git的精髓–分支管理。当然对新手来说也是比较难以理解的概念之一。记得刚开始用git的时候，&lt;code&gt;git checkout&lt;/code&gt;这个命令还是蛮令我困惑的。困惑之一就是远程分支和本地分支的管理上。比如怎么把远程不同于&lt;code&gt;master&lt;/code&gt;分支的东西弄到本地，怎么在不同分支之间切换自如，利用分支的优势为自己开发所用等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://zhzhou.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore文件的使用</title>
    <link href="http://zhzhou.me/2017/05/26/gitignore-usage/"/>
    <id>http://zhzhou.me/2017/05/26/gitignore-usage/</id>
    <published>2017-05-26T06:33:31.000Z</published>
    <updated>2017-05-26T07:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>用上<code>GitHub</code>之后似乎什么项目都想push一下，新手在用git相关命令难免有些问题。有很多问题似乎是过了很久我才明白的，虽然间间断断用git也很长时间了。这些问题类似“vim退出”之类，不过新手确实难免会碰到。这里做点记录，方便自己和后来人。</p><a id="more"></a><p>git项目中如果想要忽略掉某个文件，不让它出现在版本库中，比如<code>.DS_Store</code>之类的文件，可以在项目根目录中修改<code>.gitignore</code>文件，这个文件一般不用自己创建，也不大需要修改，有些IDE会自己给你弄好。但是有的时候还是需要自己手动修改一下，比如有的文件中包含了你数据库的密码，当然就不能出现在github上了。</p><p>修改<code>.gitignore</code>文件很简单，一行一行输入不需要放到版本库里面的文件或文件夹名即可。</p><p>不过有的时候push过之后，然后修改了<code>.gitignore</code>，每次<code>git status</code>会出现<code>Untracked files...</code>之类的提示。这是因为文件已经被<code>版本管理</code>了！文件已经被track了。如果需要解决这个问题，就需要删除掉本地的缓存文件，变成untrack状态。</p><p>步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .  </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br></pre></td></tr></table></figure><p>再次<code>git status</code>，发现clean了，完美。</p><p>相关链接：</p><ul><li><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">半官方资料</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000" target="_blank" rel="noopener">廖雪峰教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用上&lt;code&gt;GitHub&lt;/code&gt;之后似乎什么项目都想push一下，新手在用git相关命令难免有些问题。有很多问题似乎是过了很久我才明白的，虽然间间断断用git也很长时间了。这些问题类似“vim退出”之类，不过新手确实难免会碰到。这里做点记录，方便自己和后来人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://zhzhou.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mac OSX上安装 Java</title>
    <link href="http://zhzhou.me/2017/04/19/install-java-on-mac/"/>
    <id>http://zhzhou.me/2017/04/19/install-java-on-mac/</id>
    <published>2017-04-19T00:17:38.000Z</published>
    <updated>2017-05-03T02:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Mac上安装Java，之前都是在官方网站下载安装包，这样当然不怎么方便，所以自然就想到用homebrew安装了。查了一下，果然有办法，而且可以保持几个不同版本的JDK，方便不同版本测试。</p><p>这个方法就是使用jenv，这个东西是基于rbenv开发的，不同的是rbenv是为了管理ruby，jenv是为了管理java。用jenv之后，就不用设置什么$JAVE_HOME变量了。而且可以方便切换各种不同版本的JDK，方便调试。</p><a id="more"></a><h3 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h3><ul><li>安装 <code>brew-cask</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install caskroom/cask/brew-cask</span><br></pre></td></tr></table></figure><ul><li>安装 <code>jenv</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br><span class="line">echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>安装最新版本的<code>Java</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install java</span><br></pre></td></tr></table></figure><ul><li>然后看看brew把Java安装到哪里去了，一般在如下位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/</span><br></pre></td></tr></table></figure><ul><li>然后在$HOME目录下加一个<code>.java-version</code>文件，里面写个<code>1.8</code>，结束。</li></ul><p>下面具体谈谈具体细节。</p><p>首先Jenv是用来干啥的？</p><p>主要是用来管理不同版本的Java的，什么Oracle JDK，OpenJDK等。可以去<a href="http://www.jenv.be" target="_blank" rel="noopener">官网</a>看看。</p><p>在OSX中所有JVM都安装在 <code>/Library/Java/JavaVirtualMachines/</code>下，所以上面第四步添加安装的版本到jenv中。</p><h3 id="查看安装了那些JDK版本。"><a href="#查看安装了那些JDK版本。" class="headerlink" title="查看安装了那些JDK版本。"></a>查看安装了那些JDK版本。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ ᐅ jenv versions</span><br><span class="line">  system</span><br><span class="line">* 1.8 (set by /Users/Spike/.java-version)</span><br><span class="line">  1.8.0.121</span><br><span class="line">  oracle64-1.8.0.121</span><br></pre></td></tr></table></figure><h3 id="配置全局版本号"><a href="#配置全局版本号" class="headerlink" title="配置全局版本号"></a>配置全局版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv global oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h3 id="配置本地版本号"><a href="#配置本地版本号" class="headerlink" title="配置本地版本号"></a>配置本地版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv local oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h3 id="配置Shell版本号"><a href="#配置Shell版本号" class="headerlink" title="配置Shell版本号"></a>配置Shell版本号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv shell oracle64-1.6.0.39</span><br></pre></td></tr></table></figure><h3 id="生成-Shims"><a href="#生成-Shims" class="headerlink" title="生成 Shims"></a>生成 Shims</h3><p>jenv可以将所有安装过的Java版本中的bin目录集合管理，即<code>~/.jenv/versions/*/bin/*</code>中的所有东西都放到shims文件夹下。每次安装完新版本都运行<code>jenv rehash</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv rehash</span><br></pre></td></tr></table></figure><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li><a href="https://github.com/gcuisinier/jenv/blob/master/README.md" target="_blank" rel="noopener">Master your Java Environnement with jenv</a></li><li><a href="https://forum.shakacode.com/t/install-java-1-8-on-mac-os-el-capitan/389" target="_blank" rel="noopener">Install Java 1.8 on Mac OS El Capitan</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Mac上安装Java，之前都是在官方网站下载安装包，这样当然不怎么方便，所以自然就想到用homebrew安装了。查了一下，果然有办法，而且可以保持几个不同版本的JDK，方便不同版本测试。&lt;/p&gt;
&lt;p&gt;这个方法就是使用jenv，这个东西是基于rbenv开发的，不同的是rbenv是为了管理ruby，jenv是为了管理java。用jenv之后，就不用设置什么$JAVE_HOME变量了。而且可以方便切换各种不同版本的JDK，方便调试。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Travis-CI 来自动化部署 Hexo</title>
    <link href="http://zhzhou.me/2017/02/20/auto-deploy-hexo-on-travis-ci/"/>
    <id>http://zhzhou.me/2017/02/20/auto-deploy-hexo-on-travis-ci/</id>
    <published>2017-02-20T06:00:00.000Z</published>
    <updated>2019-05-16T03:33:12.361Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个 <a href="http://spikezz.com/2016/07/07/how-to-create-a-hexo-blog" target="_blank" rel="noopener">Hexo 博客的搭建方法</a>，搭建好之后我就没有怎么写博客了。一来是因为自己没什么好分享的（其实就是懒哈），二来是感觉静态技术博客这种形式已经落伍了，如果要学某种技术，还是直接找视频教程比较快。</p><p>不过因为知道了“持续集成”，即 <code>Continuous integration</code>，这种技术已经很常见了，不过我最近才学习到。用在 hexo 博客的部署上比较合适，整个部署也比较简单，适合我这种小白。</p><a id="more"></a><p>之前部署 hexo 博客，只要在终端输入 <code>hexo g -d</code>即可，当然前提是你已经写好文章了呀，写不出文章的话我是帮不了的。而且已经搭建好博客环境，即 node.js 相关及 Hexo 本身。那换成 <code>Travis CI</code> 的持续集成服务到底有什么用呢？操作会不会更简单？答案是—–不会！</p><p>那TM要它有什么用？！</p><p>且听我慢慢说。</p><h1 id="什么叫持续集成"><a href="#什么叫持续集成" class="headerlink" title="什么叫持续集成"></a>什么叫持续集成</h1><p>网上很多解释，感兴趣的可以看看阮一峰的<a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">这篇文章</a>。</p><p>概括起来讲，就是一个外包公司，博主只管写好文章，然后丢给它去处理，它就自动给你各种加工渲染，然后放到博客页面上去。你只需在有网络的地方即可开始写作，当然也要能无障碍访问 GitHub 才行啊（关于如何更快访问墙外网络，我会在之后一篇文章说明）。直接登录 GitHub 账号写东西，实在不够优雅，所以还要弄个 Markdown 编辑器，本地或者基于 Web 的都可以（Mac 推荐用 <code>Bear</code>，web的就用 <code>Cmd Markdown</code>），写完直接 push 到 GitHub 即可，其他各种库、主题什么的更新都不用管了。这才是新时代的方法—-只要提出需求，然后交给“云”处理。</p><h1 id="Travis-CI-介绍"><a href="#Travis-CI-介绍" class="headerlink" title="Travis-CI 介绍"></a>Travis-CI 介绍</h1><p><code>Travis CI</code> 是目前新兴的开源持续集成构建项目，用来构建托管在GitHub上的代码。简单来说，<code>Travis CI</code>原理就是当你每次提交 <code>commit</code> 到在 <code>GitHub</code> 后，它会自动检测你的提交，同时根据的配置文件，生成一个 Linux 虚拟机来运行你的命令，通常这些命令用于测试，构建等。在我们的要求下，就可以用它运行一些<code>hexo g d</code>之类的命令来自动生成、部署我静态网页。好像不是很懂，没关系，做一遍就懂了。</p><p><a href="https://docs.travis-ci.com/user/getting-started" target="_blank" rel="noopener">Travis-CI 官方文档</a>，有时间，懂英语的可以仔细看看。写得最好的还是官方文档，一般我们总是各种找教程什么的，其实最好的教程就是自带的文档。</p><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>看到这里，应该都有了 <code>GitHub</code> 的 Pages了，不然也不会涉及到部署什么的。下面步骤前提是在你电脑上可以 <code>hexo g -d</code>成功的前提下进行的。</p><p>登陆<code>Travis CI</code>官网，使用GitHub账户登录，发现你的 <code>repos</code>都出现了吧。然后关键了。选择你要启动的项目，在这里也就是<code>yourname/yourname.GitHub.io</code>，你的博客项目地址。</p><p>然后点击设置按钮，进入设置选项，开启第一行的服务:</p><ul><li><code>Build only if .travis.yml is present</code>：是只有在.travis.yml文件中配置的分支改变了才构建；</li><li><code>Build pushes</code>：当推送完这个分支后开始构建。</li></ul><center><img src="http://static.zybuluo.com/spikett/53whszhrw6l15onttf8d20ol/Snip20170223_2.png" alt="Snip20170223_2.png-54.3kB"></center><p>到这一步， 我们已经开启了要构建的仓库。但此时Travis还没法帮助我们自动构建并部署，因为没有访问GitHub的权限。我们自己在本地计算机上push能成功是因为有了 SSH key，但是交给 travis去部署的话，它是没有这个key的，但是也可以给它，只要加密再解密就好了，配置文件配置可以参考文末的链接。不过我这里就用GitHub提供的token变量功能吧，比较适合新手。</p><p>在 <code>GitHub</code> 上为 <code>Travis CI</code> 配置 <code>Acess Token</code>，登陆GitHub，进入设置界面，点击到 <code>Personal access tokens</code> 页面。</p><p>点击右上角的<code>Generate new token</code> 按钮会生成新的token，点击后提示输入密码后继续，然后来到如下界面，取个名字（我这里取 <code>GH_token</code>，下面配置文件中要用到，牢记！），勾选一些权限（只要repo就行了，还有email），这个token很重要，如果别人也有了这个token，你<code>GitHub</code>账户的repo就可能被任意修改！！所以不能外泄这个token！重要的事情就不说三遍了。不过如果外泄了，登录你的GitHub，删除这个token即可。</p><p><img src="http://static.zybuluo.com/spikett/yp8xndh33eha7yxsdwxhcb99/Snip20170223_3.png" alt="Snip20170223_3.png-148.2kB"></p><p>生成完后，拷贝下来，只有这时候才会显示，下载进来为了安全他就不会显示了，如果忘了只能重新生成一个了，拷贝完以后到<code>Travis CI</code>页面中 <code>Environment Variables</code> 进行配置。</p><p>现在 Travis CI 已获得 GitHub 访问权限，但它并不知道如何进行部署，所以还需要进一步设置。</p><p>在源代码分支（我这里即 blog-source 分支）下配置 <code>.travis.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>   <span class="comment">#设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span>     <span class="comment">#设置相应的版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span>    <span class="comment">#据说可以减少travis构建时间</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://github.com/zpike/hexo-theme-apollo.git</span> <span class="string">themes/apollo</span></span><br><span class="line">       <span class="comment">#自己配置一个主题，也是乐趣之一，特效什么的，不过我还是偏好简洁（Next主题用的人真是多啊）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span>   <span class="comment">#安装hexo及插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch</span> <span class="string">master</span> <span class="attr">https://github.com/zpike/zpike.github.io.git</span> <span class="string">public</span></span><br><span class="line">        <span class="comment">#获取最新的commit信息</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">cl</span>   <span class="comment">#清除</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">g</span>   <span class="comment">#生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"zpike"</span>   <span class="comment">#修改成自己的github用户名</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"conan401@126.com"</span>   <span class="comment">#修改成自己的GitHub邮箱</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"update"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_token&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span> <span class="comment">#GH_token就是在travis中设置的token</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">blog-source</span>  <span class="comment">#只监测这个分支，一有动静就开始构建（我可能发一篇文章会push好多次，每次看到它忙着构建，感觉好浪费）。</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/zpike/zpike.github.io.git</span></span><br></pre></td></tr></table></figure><p>大致结构就是这样，根据自己的需求还需要一点修改。</p><p><code>.travis.yml</code> 配置完成，这个时候就可以push文章到你的 <code>blog-source</code> 分支上去了。然后其他工作都由 Travis-CI 来完成。</p><p>登陆<code>Travis CI</code>，不出意外的话（我出了好多次意外，不过最终皇天不负有心人！哈哈）Travis已经检测到变化并进行构建部署，log记录了构建的过程，出什么问题里面都可以点开来看。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>如果出问题，基本都是配置文件的问题，yml文件的格式还是要求比较严格的，稍微不注意就不行。.travis.yml 文件的主要流程分三步，获取历史，生产静态文件，发布。</p><ul><li><p><code>before_script</code>: 在所有动作之前，先把 master 分支clone到<code>./public</code>文件夹，保留之前的 commit记录，把最新结果提交上去。</p></li><li><p><code>script</code>: 就是 <code>hexo generate</code>的过程。</p></li><li><p><code>after_success</code>: 在成功之后，成功都到了public文件夹下，然后就是照着<code>git push</code>到<code>master</code>分支下。</p></li></ul><p>当然还需要确认<code>travis build</code>都在 <code>blog-source</code>分支下工作。</p><h4 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h4><p>网上很多hexo的主题，有的还在持续更新，这个就需要在配置文件中clone 一下，保持更新，或者在package.jason文件中配置一下也行吧（没试过），还是在travis配置文件中设置一下，方便换主题。设置在 <code>before_install</code> 后面。</p><h4 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h4><p>这套方案弄完之后，在任何电脑，只要有git，就可以写东西了。git指令如何操作呢？</p><p>新手可能会比较麻烦。比如我。虽然我很早就用过git，不过很多指令学了忘，忘了学。其实最好的学习就是不断使用，如果几周不用，再好的工具也记不住。比如vim或者emacs。</p><p>git新手建议看看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的博客</a>，还有<a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener"><strong>git-scm</strong></a>，还有<a href="https://www.git-tower.com/learn/git/ebook/en/desktop-gui/basics/basic-workflow#" target="_blank" rel="noopener"><strong>git-tower</strong>官网</a>的很多教程，写得非常好，图文并茂，入门书籍的话应该无出其右了。</p><p>不过在写博客这方面，只需要记住几个常用的命令就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:zpike/zpike.github.io.git  #先克隆</span><br><span class="line">git checkout origin/blog-source   #默认是master分支，然后切换分支</span><br><span class="line">git checkout -b blog-source   #本地新建一个博客源文件分支</span><br><span class="line"></span><br><span class="line">git add .   #写完博客添加文件</span><br><span class="line">git commit -m &quot;xxx&quot;  #加入commit信息</span><br><span class="line">git push origin blog-source  #push到远程</span><br></pre></td></tr></table></figure><p>记住以上必用的命令当然不够，为了更方便操作，还是需要多多记住一些常用的git命令。</p><p>如果在web上直接写文章的话，看下面。当然不建议这么做啦，不过如果身边没有设备的话，只有一只手机，那也没办法。灵感来了挡不住呀。</p><p><a href="http://prose.io" target="_blank" rel="noopener">prose</a>这个网站不错，很清爽，然后可以和<strong>Github</strong> 绑定，这样就可以直接在这上面写你的<strong>Pages</strong>博客了，写好直接save，搞定！。网页端暂时只有这个我比较满意。</p><p>好的客户端还在寻找中，如果<strong>Bear</strong>或者<strong>Ulysses</strong>支持就好了，或者好像<strong>Tower</strong>是管理GitHub的利器，不行也可以那里写，只是不知道markdown支持如何。</p><p>不过虽然可以直接写，但是很多<strong>Hexo</strong>的特性就用不到了，比如一些模版什么的，每次还要自己输入元数据，还是稍显麻烦。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在终于可以anywhere, anyplatform, anyeditor都可以开始写作了，还是很不错的。要做的就是打开editor，然后写完push即可，不用操心其它，多美好！</p><p>在工具的路径上是没有止境的，生命不息，折腾不止。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.jianshu.com/p/5e74046e7a0f" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo</a></p><p><a href="https://levirve.GitHub.io/2016/hexo-deploy-through-travisci" target="_blank" rel="noopener">使用 Travis CI 自動發布 hexo 到 GitHub pages</a></p><p><a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">基于 Hexo 的全自动博客构建部署系统</a></p><p><a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="noopener">用 Travis CI 自動部署網站到 GitHub(Hexo 作者写的)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一个 &lt;a href=&quot;http://spikezz.com/2016/07/07/how-to-create-a-hexo-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo 博客的搭建方法&lt;/a&gt;，搭建好之后我就没有怎么写博客了。一来是因为自己没什么好分享的（其实就是懒哈），二来是感觉静态技术博客这种形式已经落伍了，如果要学某种技术，还是直接找视频教程比较快。&lt;/p&gt;
&lt;p&gt;不过因为知道了“持续集成”，即 &lt;code&gt;Continuous integration&lt;/code&gt;，这种技术已经很常见了，不过我最近才学习到。用在 hexo 博客的部署上比较合适，整个部署也比较简单，适合我这种小白。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo travis" scheme="http://zhzhou.me/tags/hexo-travis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建笔记</title>
    <link href="http://zhzhou.me/2016/07/07/how-to-create-a-hexo-blog/"/>
    <id>http://zhzhou.me/2016/07/07/how-to-create-a-hexo-blog/</id>
    <published>2016-07-07T08:07:16.000Z</published>
    <updated>2019-05-20T00:49:28.651Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前看过阮一峰的介绍 Jekyll 做个人博客的文章，那时候还没用 Mac，所以也没法尝试。现在用了Mac之后想起来了，不过写博客还是挺费力的，没啥干货也不好意思出来唠叨。尽量写点有趣又有科技含量的东西吧，逼着自己更新知识库还是不错的。</p><p>Jekyll的官网虽然做得不错，但是流程我还没看明白，比Hexo的说明要复杂。所以下面就从弄Hexo博客开始吧。</p><a id="more"></a><p>这几天折腾了一个Hexo博客，并且部署到GitHub和Coding，而且租了个服务器，弄个了个人域名，过程中几个小问题搜了很多文章，但是也没能解决我的问题，还是挺费劲的。第一篇文章就用来记录这个过程我遇到的问题吧。</p><p>网上信息比较多，很多过期的文章，软件版本更新之后就不大能用了，PC和Mac下的区别较多，给新手会造成不必要的误解。</p><p>官网可以查到的东西我就不再写了，下面多写写自己这个过程中遇到的一些问题。</p><hr><p>Hexo是一个台湾人弄的，不知道靠不靠谱，希望可以一直更新吧，毕竟用起来整体感觉还不错，轻快简单。</p><p>很多人推荐使用NexT主题，搜了一下发现好多人用这个主题，瞬间感觉没啥特点了。所以要想独特一点，有个性一点还是自己找个冷门点的主题改改，或者自己弄个主题，只要专注于写作就行。</p><p>安装过程比较简单，不说了。Hexo安装依赖于node.js，npm安装比较不稳定，开个VPN比较好一点。Hexo官网上面的文档挺全的，需要补充的就是主题的设置，还有网站的第三方服务的设置。</p><hr><p>Hexo的配置都在<code>_config.yml</code>中，里面注释比较详细，不懂的查下官网，一般都知道怎么设置。需要注意的是文件类型是yml，语法要求比较严格，开头冒号后面必须空一格，不然不能识别。语法支持好的比如vim或者sublime，弄个插件，一般都能很好支持yml语法。还有这个文件要和主题目录下的同名文件相互区别，不要弄混淆了。</p><p>具体设置，比如language，中文简体的代码是<code>zh-hans</code>，其他设置试一下就知道了，一般默认就ok了。头像，logo什么的，弄个url比较好，或者放到Hexo的source目录下，这样<code>Hexo g</code> 的时候才能不丢失。</p><p>配置测试ok了，然后就可以写blog了。<code>Hexo new</code> 加文件名即可。这样就在source文件夹下新建了一个文件，写好标签和分类，就可以写正文了。网上有教你Hexo new之后直接打开编辑器的教程，这样就更方便了。直接在sublime中或者其他编辑器中写文章。需要注意的是Win下目录设置的问题。类似这样<code>D:\\Program Files\\Sublime Text 3\\...</code>。Mac中的话就比如这样<code>&quot;/Applications/Sublime\ Text.app&quot;</code>，注意空格之前要加一个反斜杠。（不过Sublime并不大适合写文章，MWeb据说不错可以试试）</p><p>其实还可以使用Cmd Markdown在线写文章，然后导出markdown格式，再稍微修改即可发布了。不过过程稍微麻烦了点。喜欢移动写作的人，估计会比较喜欢。不过最近我将hexo固定到air上来写，所有其他电脑上的文件都删除了。这样还是更适合我一点。（当然在这之前，你还是可以尽量折腾，比如自动构建什么的）</p><p>写文章不满意，当然也可以删掉，但是Hexo没有提供删除文章的命令，所以手动删掉也行，不过我测试了一下，在删光文章的时候Hexo g会出错，一定要hexo new一篇文章才能进行Hexo g。</p><p>再然后就是配置主题什么的了。建议看看NexT主题的官网，里面有详细的教程，非常实用，很多官网没看明白的东西可以在那边看看。比如字体，图标，第三方服务什么的。主题其实也是个大坑，最近就不研究了。专注写作比较好。当然第三方服务可以看看，毕竟要用到不少，比如评论系统，</p><hr><p>最后写好文章就可以推送到 github pages 上去了。GitHub或者Coding都不错，国内建议用Coding，速度很快。不过很多人遇到Hexo d的时候不成功的问题，我也被这个问题折磨了很久，网上很多回答都没有解决我的问题。</p><p>其实直接将public中的生成文件push到pages就行了，只是这样不够优雅。所以还是希望一条命令（<code>Hexo g -d</code>）解决部署，在Mac问题较少，Win用户貌似要多写点配置内容，不过基本用我下面写的配置内容一定可以成功的。</p><p>首先想要部署到GitHub需要安装一个插件，<code>Hexo-deployer-git</code>，这个插件里面的文档作用比各种网上的文件要有用太多，建议看看。最终解决我的Hexo d的问题就是看了那个文档。因为我是Win下Git bash环境，所以Hexo d会出现问题，配置文件中需要这样写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://Hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@GitHub.com:name/name.GitHub.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">your_GitHub_username</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">your_email_address</span></span><br></pre></td></tr></table></figure><p>当然前提是你ssh密钥以及GitHub或者Coding上主页都弄好了，具体看下各个网站的详细说明，Coding上比较容易，GitHub 稍复杂，跟着帮助文档过一遍流程就更熟悉了。</p><p>还有hexo g的时候可能会出现一些常见的问题，比如什么DTraceProviderBingds之类的，貌似是npm的问题，我之前遇到过，不过瞎弄了几次，居然莫名其妙就好了，暂时不知道为啥。</p><p>国内的duoshuo不行了，只能换到disqus上去了，不过我的博客总是加载不了disqus的服务，不知道为什么。索性就不用评论系统了，但是会保持的更新的。继续完善每个主题的文章。</p><hr><p>最后列一下这个过程中用到的网站，方便查询。</p><ul><li><a href="https://Hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题官方网站详细配置</a> </li><li><a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="noopener">Coding Pages使用文档</a></li><li><a href="http://huangming.work/2016-05-02-Hexo-img-solution.html" target="_blank" rel="noopener">Hexo怎么优雅地插入图片</a></li><li><a href="http://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html" target="_blank" rel="noopener">Hexo添加文章时自动打开编辑器</a></li><li><a href="http://duoshuo.com/" target="_blank" rel="noopener">多说评论</a></li><li><a href="http://www.twalksong.com/2015/09/12/Hexo%E8%BF%9B%E9%98%B6/" target="_blank" rel="noopener">Hexo进阶</a></li></ul><p>ps：还有图床可以用iPic，Mac 上面很好用，或者在 Windows 上面可以用MPic，配合七牛都是神器。直接复制图片，即可在md文件中粘贴。</p><p>还有很多 markdown 中可以用到的插件，或者工具，会为你的文章添加更多色彩，这些我准备再多研究下，再写几篇文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久以前看过阮一峰的介绍 Jekyll 做个人博客的文章，那时候还没用 Mac，所以也没法尝试。现在用了Mac之后想起来了，不过写博客还是挺费力的，没啥干货也不好意思出来唠叨。尽量写点有趣又有科技含量的东西吧，逼着自己更新知识库还是不错的。&lt;/p&gt;
&lt;p&gt;Jekyll的官网虽然做得不错，但是流程我还没看明白，比Hexo的说明要复杂。所以下面就从弄Hexo博客开始吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://zhzhou.me/tags/hexo/"/>
    
  </entry>
  
</feed>
